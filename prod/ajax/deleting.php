<?php
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require '../PHPMailer/src/Exception.php';
require '../PHPMailer/src/PHPMailer.php';
require '../PHPMailer/src/SMTP.php';
session_start();
error_reporting(0);
$mail = new PHPMailer(true);

if(isset($_SESSION['logxged']) && !empty($_SESSION['logxged'])) {
    require_once('../dbconn1.php');
    $identity = validateXss($_GET['identity']);
    $conn = connection("mca", "MCA_admin");
    $conn1 = connection("doc", "doctors");
    $conn2 = connection("cod", "Coding");

    if ($identity == 1) {
        $id = validateXss($_GET['id']);
        try {
            if(!empty($id) && $_SESSION['level'] == "admin") {
                $stmt = $conn->prepare('Delete FROM claim WHERE claim_id = :num');
                $stmt->bindParam(':num', $id, PDO::PARAM_STR);
                $b = $stmt->execute();
                if ($b == 1) {
                    echo "Deleted";
                } else {
                    echo "Deletion Failed";
                }
            }
            else{
                echo "There is an error";
            }
        } catch (Exception $c) {
            echo "There is an error, try again ".$c;
        }
    }
    else if ($identity == 2) {
        $id = validateXss($_GET['id']);
        try {

            $stmtD = $conn->prepare('SELECT a.intervention_id,a.claim_id,a.intervention_desc,a.date_entered,a.owner,b.username FROM intervention as a INNER JOIN claim as b ON a.claim_id=b.claim_id WHERE intervention_id = :num');
            $stmtD->bindParam(':num', $id, PDO::PARAM_STR);
            $stmtD->execute();
            $nuD = $stmtD->rowCount();
            $sys_username="";
            if ($nuD > 0) {

                foreach ($stmtD->fetchAll() as $rowD) {
                    $id = $rowD[0];
                    $cid = $rowD[1];
                    $desc = $rowD[2];
                    $date = $rowD[3];
                    $owner = $rowD[4];
                    $sys_username = $rowD[5];
                    if($_SESSION['level'] == "admin" || $_SESSION['user_id']==$sys_username) {
                        $stmtI = $conn->prepare('INSERT INTO delete_logs(intervention_id, claim_id, description,intervention_date,owner) VALUES(:id,:cid,:des,:dat,:owner)');
                        $stmtI->bindParam(':id', $id, PDO::PARAM_STR);
                        $stmtI->bindParam(':cid', $cid, PDO::PARAM_STR);
                        $stmtI->bindParam(':des', $desc, PDO::PARAM_STR);
                        $stmtI->bindParam(':dat', $date, PDO::PARAM_STR);
                        $stmtI->bindParam(':owner', $owner, PDO::PARAM_STR);
                        $stmtI->execute();
                    }
                }
            }
            if($sys_username=="System")
            {
                die("You cannot delete note generated by the System");
            }

            if($_SESSION['level'] == "admin" || $_SESSION['user_id']==$sys_username) {
                $stmt = $conn->prepare('Delete FROM intervention WHERE intervention_id = :num');
                $stmt->bindParam(':num', $id, PDO::PARAM_STR);
                $b = $stmt->execute();
                if ($b == 1) {
                    echo "Deleted";
                } else {
                    echo "Deletion Failed";
                }
            }
            else{
                echo "There is an error";
            }
        } catch (Exception $c) {
            echo "There is an error, try again";
        }
    } else if ($identity == 3) {
        $id = validateXss($_GET['id']);
        $pid = validateXss($_GET['pid']);
        $state = 0;
        if ($pid == 44) {
            $state = 1;
        }
        if(!empty($id) && $_SESSION['level'] == "admin") {
            try {

                $stmt = $conn1->prepare('UPDATE staff_users SET state=:st WHERE user_id = :num');
                $stmt->bindParam(':num', $id, PDO::PARAM_STR);
                $stmt->bindParam(':st', $state, PDO::PARAM_STR);
                $b = $stmt->execute();
                if ($b == 1) {
                    echo "Updated";
                } else {
                    echo "Update Failed";
                }
            } catch (Exception $c) {
                echo "Error";
            }
        }
        else{
            echo "Incorrect entry";
        }
    } else if ($identity == 4) {
        echo "Invalid URL";
    } else if ($identity == 5) {
        $email = $_GET['email'];
        $password = validateXss($_GET['password']);
        $cc = validateXss($_GET['cc']);
        $folder = validateXss($_GET['folder']);
        $smtp = validateXss($_GET['smtp']);
        $imap = validateXss($_GET['imap']);
        $notemail = validateXss($_GET['notemail']);
        $notpass = validateXss($_GET['notpass']);
        if (filter_var($email, FILTER_VALIDATE_EMAIL) && $_SESSION['level'] == "admin") {
            try {

                $stmt1 = $conn->prepare('UPDATE email_configs SET email=:email,password=:password,destination_folder=:folder,smtp_server=:smtp,imap_server=:imap,cc=:cc,notification_password=:notpass, notification_email=:notemail');
                $stmt1->bindParam(':email', $email, PDO::PARAM_STR);
                $stmt1->bindParam(':password', $password, PDO::PARAM_STR);
                $stmt1->bindParam(':folder', $folder, PDO::PARAM_STR);
                $stmt1->bindParam(':smtp', $smtp, PDO::PARAM_STR);
                $stmt1->bindParam(':imap', $imap, PDO::PARAM_STR);
                $stmt1->bindParam(':cc', $cc, PDO::PARAM_STR);
                $stmt1->bindParam(':notemail', $notemail, PDO::PARAM_STR);
                $stmt1->bindParam(':notpass', $notpass, PDO::PARAM_STR);
                $b1 = $stmt1->execute();

                if ($b1 == 1) {
                    echo "Updated";
                } else {
                    echo "Update Failed";
                }
            } catch (Exception $c) {
                echo "Error";
            }
        }
        else{
            echo "Invalid entry";
        }
    }
    else if ($identity == 6) {
        $id = validateXss($_GET['id']);
        $pid = validateXss($_GET['pid']);
        $state = 0;
        $dd = "8521-01-01 00:00";
        if ($pid == 44) {
            $state = 1;
            $dd = date('Y-m-d H:I');
        }
        if($_SESSION['level'] == "admin" && !empty($id)) {
            try {

                $stmt = $conn->prepare('UPDATE users_information SET status=:st,datetime=:dd WHERE id = :num');
                $stmt->bindParam(':num', $id, PDO::PARAM_STR);
                $stmt->bindParam(':st', $state, PDO::PARAM_STR);
                $stmt->bindParam(':dd', $dd, PDO::PARAM_STR);
                $b = $stmt->execute();
                if ($b == 1) {
                    echo "Updated";
                } else {
                    echo "Update Failed";
                }
            } catch (Exception $c) {
                echo "Error : " . $c;
            }
        }
        else{
            echo "Invalid Entry";
        }
    }
    else if ($identity == 7) {
        if ($_SESSION['level'] == "claims_specialist") {
            $r = $_SESSION["currentClaimid"];
            if(checkOwner($r,2)) {

                try {

                    $stmt1 = $conn->prepare('UPDATE feedback SET open=1 WHERE claim_id=:num');
                    $stmt1->bindParam(':num', $r, PDO::PARAM_STR);
                    $stmt1->execute();

                } catch (Exception $c) {

                }
            }

        }
    } else if ($identity == 9) {

        if ($_SESSION['level'] == "claims_specialist" || $_SESSION['level'] == "admin") {

            $id = validateXss($_GET['intId']);
            if(checkOwner($id,1)) {
                $st = 2;
                try {

                    $stmt1 = $conn->prepare('UPDATE intervention SET reminder_status=:st WHERE intervention_id=:num');
                    $stmt1->bindParam(':num', $id, PDO::PARAM_STR);
                    $stmt1->bindParam(':st', $st, PDO::PARAM_STR);
                    $rep = $stmt1->execute();
                    if ($rep == 1) {
                        echo "Updated.";
                    } else {
                        echo "Fail to update";
                    }


                } catch (Exception $c) {

                }
            }
            else {
                echo "Invalid entry";
            }
        } else {
            echo "Invalid entry";
        }
    } else if ($identity == 11) {

        if ($_SESSION['level'] == "admin") {

            $start_date = $_POST['start_date'];
            $end_date = $_POST['end_date'];
            $from_date = date('Y-m-d', strtotime($start_date));
            $to_date = date('Y-m-d', strtotime($end_date));
            $today = date('Y-m-d');
            $datetime1 = strtotime($to_date);
            $datetime2 = strtotime($today);
            $secs = $datetime2 - $datetime1;// == <seconds between the two times>
            $days = $secs / 86400;
            if (empty($start_date) || empty($end_date)) {
                echo "Please fill in the blanks";
            } else if ($from_date > $to_date) {
                echo "Incorrect date range";
            } else if ($days < 90) {
                echo "Incorrect time frame";
            } else {
                try {
                    $stmt1 = $conn->prepare('SELECT a.doc_description,a.randomNum,a.doc_id FROM documents as a INNER JOIN claim as b ON a.claim_id=b.claim_id WHERE b.Open=0 And (a.date BETWEEN :start AND :end)');
                    $stmt1->bindParam(':start', $start_date, PDO::PARAM_STR);
                    $stmt1->bindParam(':end', $end_date, PDO::PARAM_STR);
                    $stmt1->execute();
                    $nu = $stmt1->rowCount();

                    if ($nu > 0) {

                        foreach ($stmt1->fetchAll() as $row) {
                            $docName = $row[0];
                            $random = $row[1];
                            $doc_id = $row[2];
                            $path = $_SERVER['DOCUMENT_ROOT'] . "/admin/documents/" . $random . $docName;
                            if (file_exists($path)) {
                                unlink($path);
                                $stmt2 = $conn->prepare('DELETE FROM documents WHERE doc_id=:num');
                                $stmt2->bindParam(':num', $doc_id, PDO::PARAM_STR);
                                $stmt2->execute();
                            }
                        }
                        echo "Done!!<br>Total Number of files deleted is : " . $nu;
                    } else {
                        echo "No file found";
                    }


                } catch (Exception $c) {

                }
            }

        } else {
            echo "You are not the admin";
        }
    } else if ($identity == 12) {
        if ($_SESSION['level'] == "admin") {
            $claim_number = validateXss($_POST['claim']);

            if (getClaimId($claim_number) == "Invalid Code") {
                echo getClaimId($claim_number);
            } else {
                $claim_id = getClaimId($claim_number);
                $sql = $conn->prepare('SELECT *FROM documents WHERE claim_id=:claim');
                $sql->bindParam(':claim', $claim_id, PDO::PARAM_STR);
                $sql->execute();
                $nu = $sql->rowCount();

                if ($nu > 0) {
                    echo "<table border='0' width='100%'><tr style='background-color:cadetblue'><th></th><th>File Name</th><th>Size</th><th></th></tr>";
                    foreach ($sql->fetchAll() as $row) {
                        $id = $row[0];
                        $ra = $row[6];
                        $nname = $row[2];
                        $desc = "../documents/" . $ra . $nname;
                        $type = $row[3];
                        $size = round($row[4] / 1024);
                        echo "<tr id='$id'><td><input type='checkbox'> </td><td>
 
<form action='../view_doc.php' method='post' target='_blank'/><input type=\"hidden\" name=\"my_doc\" value=\"$desc\" />
<input type=\"submit\" class=\"linkbutton\" name=\"doc\" value=\"$nname\">
</form>
</td><td>$size<b style='color:green'>KB</b></td><td><span style=\"color:red;cursor: pointer\" onclick=\"deletex('$id')\"><u>Delete</u></span></td></tr>";
                    }
                    echo "</table>";
                    echo "<button align='center' style=\"color:red;cursor: pointer\" onclick=\"deleteAll('$claim_id')\"><u>Delete All</u></button>";
                } else {
                    echo "No Files Available";
                }
            }
        }
        else{
            echo "Invalid Entry";
        }
    } else if ($identity == 13) {
        session_start();
        if ($_SESSION['level'] == "admin") {

            $claim = $_POST['claim'];

            try {

                $stmt1 = $conn->prepare('SELECT doc_description,randomNum,doc_id FROM documents WHERE claim_id=:claim');
                $stmt1->bindParam(':claim', $claim, PDO::PARAM_STR);
                $stmt1->execute();
                $nu = $stmt1->rowCount();

                if ($nu > 0) {

                    foreach ($stmt1->fetchAll() as $row) {
                        $docName = $row[0];
                        $random = $row[1];
                        $doc_id = $row[2];
                        $path = "/usr/www/users/greenwhc/mca/documents/". $random . $docName;
                        if (file_exists($path)) {
                            unlink($path);
                            $stmt2 = $conn->prepare('DELETE FROM documents WHERE doc_id=:num');
                            $stmt2->bindParam(':num', $doc_id, PDO::PARAM_STR);
                            $stmt2->execute();
                        }
                    }
                    echo "Done!!";
                } else {
                    echo "No file found";
                }


            } catch (Exception $c) {

            }


        } else {
            echo "You are not the admin";
        }
    } else if ($identity == 14) {
        session_start();
        if ($_SESSION['level'] == "admin") {

            $doc = $_POST['doc'];

            try {
                $stmt1 = $conn->prepare('SELECT doc_description,randomNum,doc_id FROM documents WHERE doc_id=:doc');
                $stmt1->bindParam(':doc', $doc, PDO::PARAM_STR);
                $stmt1->execute();
                $nu = $stmt1->rowCount();

                if ($nu > 0) {

                    foreach ($stmt1->fetchAll() as $row) {
                        $docName = $row[0];
                        $random = $row[1];
                        $doc_id = $row[2];

                        $path = "/usr/www/users/greenwhc/mca/documents/" . $random . $docName;

                        if (file_exists($path)) {
                            unlink($path);
                            $stmt2 = $conn->prepare('DELETE FROM documents WHERE doc_id=:num');
                            $stmt2->bindParam(':num', $doc_id, PDO::PARAM_STR);
                            $nu = $stmt2->execute();
                            if ($nu == 1) {
                                echo "Deleted";
                            } else {
                                echo "Failed";
                            }
                        } else {
                            echo "File not found";
                        }
                    }

                } else {
                    echo "No file found";
                }


            } catch (Exception $c) {

            }


        } else {
            echo "You are not the admin";
        }
    } else if ($identity == 15) {

        if ($_SESSION['level'] == "admin" || $_SESSION['level'] == "claims_specialist") {
            $id = validateXss($_GET['id']);
            $doc = validateXss($_GET['doc']);
            if(checkOwner($id,2)) {

                try {

                    $stmt1 = $conn->prepare('UPDATE claim SET hasDrPaid=:doc WHERE claim_id=:id');
                    $stmt1->bindParam(':doc', $doc, PDO::PARAM_STR);
                    $stmt1->bindParam(':id', $id, PDO::PARAM_STR);
                    $nu = $stmt1->execute();
                    if ($nu == 1) {
                        echo "Done!!! --";
                    } else {
                        echo "Failed";
                    }
                } catch (Exception $c) {
                    echo "There is an error";
                }

            }
            else {
                echo "unauthorised";
            }
        } else {
            echo "unauthorised";
        }
    } else if ($identity == 16) {

        $id = validateXss($_GET['textid']);
        $note = $_GET['text'];
        $note = filter_var($_GET['text'], FILTER_SANITIZE_STRING);
        $note=htmlspecialchars($note);
        $note=my_utf8_decode($note);
        $note=trim($note);
        if(checkOwner($id,1)) {

            try {

                $stmt1 = $conn->prepare('UPDATE intervention SET intervention_desc=:note WHERE intervention_id=:id');
                $stmt1->bindParam(':note', $note, PDO::PARAM_STR);
                $stmt1->bindParam(':id', $id, PDO::PARAM_STR);
                $nu = $stmt1->execute();
                if ($nu == 1) {
                    echo "<b style='color: green'>Updated!!!</b>";
                } else {
                    echo "<b style='color: red'>Failed!!!</b>";
                }
            } catch (Exception $e) {
                echo "<b style='color: red'>There is an error!!!</b>";
            }
        }
        else{
            echo "<b style='color: red'>Failed to update</b>";
        }
    } else if ($identity == 17) {
        $val = validateXss($_GET['vall']);
        $_SESSION['level'] = $val;
        echo $val;

    }
    else if ($identity == 18) {

        if($_SESSION['level'] == "admin" ||$_SESSION['level'] == "controller" || $_SESSION['level'] == "claims_specialist") {

            $id = validateXss($_GET['textid']);
            $sd = validateXss($_GET['sd']);
            $tc = validateXss($_GET['tc']);
            $icd = validateXss($_GET['icd']);
            $ca = validateXss($_GET['ca']);
            $ss = validateXss($_GET['ss']);
            $gap = validateXss($_GET['gap']);
            $res = validateXss($_GET['res']);
            $trt = validateXss($_GET['trt']);
            $act_gap = validateXss($_GET['act_gap']);
            $myid = validateXss($_GET['myid']);
            $cpt = validateXss($_GET['cpt']);
            $claim_id = validateXss($_GET['claim_id']);
            $practice_number = validateXss($_GET['practice_number']);
            $invoice_date = validateXss($_GET['invoice_date']);
            $note = $_GET['text'];
            $note = filter_var($_GET['text'], FILTER_SANITIZE_STRING);
            $note = htmlspecialchars($note);
            $note = my_utf8_decode($note);
            $note = trim($note);
            $pmb=checkPmb($icd);
            $yyuser=$_SESSION['user_id'];
            checkDoctor1($practice_number,$cpt);
            if(!checkDoctor2($practice_number)) {
                $result = checkAllDoctors($claim_id);
                $result1 = (explode("---", $result));
                if (count($result1) > 1) {
                    if (strlen($result1[1]) < 2) {
                        die("Please Enter CPT4");
                    }
                }
            }
            try {

                $stmt1 = $conn->prepare('INSERT INTO `claim_line`(`service_date_from`,`mca_claim_id`, `practice_number`, `clmnline_charged_amnt`, `clmline_scheme_paid_amnt`, `gap`, `tariff_code`, `primaryICDCode`,`PMBFlag`,`benefit_description`,`gap_aamount_line`,`msg_code`,`treatmentDate`,`createdBy`) VALUES (:service_date_from,:mca_claim_id,:practice_number,:clmnline_charged_amnt,:clmline_scheme_paid_amnt,:gap,:tariff_code,:primaryICDCode,:PMBFlag,:benefit_description,:gap_aamount_line,:msg_code,:treatmentDate,:createdBy)');
                $stmt1->bindParam(':mca_claim_id', $claim_id, PDO::PARAM_STR);
                $stmt1->bindParam(':practice_number', $myid, PDO::PARAM_STR);
                $stmt1->bindParam(':clmnline_charged_amnt', $ca, PDO::PARAM_STR);
                $stmt1->bindParam(':clmline_scheme_paid_amnt', $ss, PDO::PARAM_STR);
                $stmt1->bindParam(':gap', $gap, PDO::PARAM_STR);
                $stmt1->bindParam(':tariff_code', $tc, PDO::PARAM_STR);
                $stmt1->bindParam(':service_date_from', $sd, PDO::PARAM_STR);
                $stmt1->bindParam(':primaryICDCode', $icd, PDO::PARAM_STR);
                $stmt1->bindParam(':PMBFlag', $pmb, PDO::PARAM_STR);
                $stmt1->bindParam(':benefit_description', $invoice_date, PDO::PARAM_STR);
                $stmt1->bindParam(':gap_aamount_line', $act_gap, PDO::PARAM_STR);
                $stmt1->bindParam(':msg_code', $res, PDO::PARAM_STR);
                $stmt1->bindParam(':treatmentDate', $trt, PDO::PARAM_STR);
                $stmt1->bindParam(':createdBy', $yyuser, PDO::PARAM_STR);
                $nu = $stmt1->execute();
                if ($nu == 1) {
                    echo "Done!!!";
                    updateDoctor($claim_id,$practice_number,$cpt);
                    amountsProcess($claim_id);
                } else {
                    echo "Failed!!!";
                }
            } catch (Exception $e) {
                echo "There is an error!!!";
            }
        }
        else
        {
            echo "Invalid Action";
        }
    }
    else if ($identity == 19) {
        $id = (int)validateXss($_GET['claim_line_id']);
        $tc=validateXss($_GET['tc']);
        $icd=validateXss($_GET['icd']);
        $ca=validateXss($_GET['ca']);
        $ss=validateXss($_GET['ss']);
        $gap=validateXss($_GET['gap']);
        $act_gap=validateXss($_GET['act_gap']);
        $pmb=checkPmb($icd);
        $benefit=validateXss($_GET['ben']);
        $code=validateXss($_GET['rej']);
        $sus=validateXss($_GET['sus']);
        $trt=validateXss($_GET['trt']);
        $cpt=validateXss($_GET['cpt']);

        $claim_id=validateXss($_GET['claim_id']);
        $practice_number=validateXss($_GET['pracno_1']);
        $practice_type=validateXss($_GET['disciplinecode']);
        $all=checkBenefit($code);
        $lng=$all["lng"];
        checkDoctor1($practice_number,$cpt);
        try {

            $shrt=$all["shrt"];
            if($lng=="---" || $shrt=="---")
            {
                $lng="yuuuu";
                $mysql="UPDATE `claim_line` SET `clmnline_charged_amnt`=:clmnline_charged_amnt, `clmline_scheme_paid_amnt`=:clmline_scheme_paid_amnt, `gap`=:gap, 
`tariff_code`=:tariff_code, `primaryICDCode`=:primaryICDCode,`PMBFlag`=:PMBFlag,`benefit_description`=:ben,`benefit_description`=:ben,clmn_line_pmnt_status=:clmn_line_pmnt_status,treatmentDate=:treatmentDate,gap_aamount_line=:gap_aamount_line,`msg_code`=:code WHERE id=:id";
                $stmt1 = $conn->prepare($mysql);

            }
            else{
                $mysql="UPDATE `claim_line` SET `clmnline_charged_amnt`=:clmnline_charged_amnt, `clmline_scheme_paid_amnt`=:clmline_scheme_paid_amnt, `gap`=:gap, 
`tariff_code`=:tariff_code, `primaryICDCode`=:primaryICDCode,`PMBFlag`=:PMBFlag,`benefit_description`=:ben,`benefit_description`=:ben,clmn_line_pmnt_status=:clmn_line_pmnt_status,treatmentDate=:treatmentDate,`msg_code`=:code,`lng_msg_dscr`=:lng,`msg_dscr`=:shrt,`gap_aamount_line`=:gap_aamount_line WHERE id=:id";
                $stmt1 = $conn->prepare($mysql);

                $stmt1->bindParam(':lng', $lng, PDO::PARAM_STR);
                $stmt1->bindParam(':shrt', $shrt, PDO::PARAM_STR);
            }
            $stmt1->bindParam(':code', $code, PDO::PARAM_STR);
            $stmt1->bindParam(':id',$id , PDO::PARAM_STR);
            $stmt1->bindParam(':clmnline_charged_amnt', $ca, PDO::PARAM_STR);
            $stmt1->bindParam(':clmline_scheme_paid_amnt', $ss, PDO::PARAM_STR);
            $stmt1->bindParam(':gap', $gap, PDO::PARAM_STR);
            $stmt1->bindParam(':tariff_code', $tc, PDO::PARAM_STR);
            $stmt1->bindParam(':primaryICDCode', $icd, PDO::PARAM_STR);
            $stmt1->bindParam(':PMBFlag', $pmb, PDO::PARAM_STR);
            $stmt1->bindParam(':ben', $benefit, PDO::PARAM_STR);
            $stmt1->bindParam(':clmn_line_pmnt_status', $sus, PDO::PARAM_STR);
            $stmt1->bindParam(':treatmentDate', $trt, PDO::PARAM_STR);
            $stmt1->bindParam(':gap_aamount_line', $act_gap, PDO::PARAM_STR);


            $nu = $stmt1->execute();
            if ($nu == 1) {
                $test=checkMofifier($claim_id,$practice_number,$practice_type);
                updateDoctor($claim_id,$practice_number,$cpt);
                amountsProcess($claim_id);
                echo "Done!!!".$test;
            } else {
                echo "Failed!!!";
            }
        } catch (Exception $e) {
            echo "There is an error!!!";
        }

    }
    else if ($identity == 20) {

        $id = (int)validateXss($_GET['claim_id']);
        $patient_name=validateXss($_GET['patient_name']);

        try {

            $stmt1 = $conn->prepare('DELETE FROM patient WHERE claim_id=:id AND patient_name=:patient');
            $stmt1->bindParam(':id',$id , PDO::PARAM_STR);
            $stmt1->bindParam(':patient', $patient_name, PDO::PARAM_STR);


            $nu = $stmt1->execute();
            if ($nu == 1) {
                echo "Patient deleted";
            } else {
                echo "Failed to delete patient";
            }
        } catch (Exception $e) {
            echo "There is an error!!!";
        }

    }
    else if ($identity == 21) {

        $id = (int)validateXss($_GET['claim_id']);
        $patient_name=validateXss($_GET['practice_number']);

        try {

            $stmt1 = $conn->prepare('DELETE FROM doctors WHERE claim_id=:id AND practice_number=:prac');
            $stmt1->bindParam(':id',$id , PDO::PARAM_STR);
            $stmt1->bindParam(':prac', $patient_name, PDO::PARAM_STR);


            $nu = $stmt1->execute();
            if ($nu == 1) {
                echo "Practice number deleted";
            } else {
                echo "Failed to delete doctor";
            }
        } catch (Exception $e) {
            echo "There is an error!!!";
        }

    }
    else if ($identity == 22) {

        $id = (int)validateXss($_GET['id']);
        $username=validateXss($_GET['username']);

        try {

            $stmt1 = $conn->prepare('SELECT a.claim_id,a.claim_number,b.policy_number,b.first_name,b.surname FROM claim as a inner join member as b on a.member_id=b.member_id
             where a.username=:user and b.client_id=:id and a.Open=1');
            $stmt1->bindParam(':id',$id , PDO::PARAM_STR);
            $stmt1->bindParam(':user', $username, PDO::PARAM_STR);
            $stmt1->execute();
            $ccc=$stmt1->rowCount();
            if($ccc>0)
            {
                echo "<table border='1' width='100%'>";
                echo "<tr style='background-color: #bce8f1'><th>Claim Number</th><td>Policy Number</td><td>First Name</td><td>Surname</td></tr>";
                foreach ($stmt1->fetchAll() as $rw)
                {
                    $claim_id=$rw[0];
                    $claim_number=$rw[1];
                    $policy_number=$rw[2];
                    $name=$rw[3];
                    $surname=$rw[4];
                    echo "<tr style='font-weight: bolder'><td>$claim_number</td><td>$policy_number</td><td>$name</td><td>$surname</td></tr>";
                }
                echo "</table>";
            }
            else{
                echo "Nothing to show";
            }

        } catch (Exception $e) {
            echo "There is an error!!!";
        }

    }
    else if($identity == 23)
    {
        $selectDetails = $conn->prepare('SELECT *FROM benefit_list');
        $selectDetails->execute();
        $ccc=$selectDetails->rowCount();
        $f = json_encode($selectDetails->fetchAll(PDO::FETCH_ASSOC));
        echo $f;
    }
    else if($identity == 24)
    {
        $selectDetails = $conn->prepare('SELECT *FROM rejection_codes');
        $selectDetails->execute();
        $ccc=$selectDetails->rowCount();
        $f = json_encode($selectDetails->fetchAll(PDO::FETCH_ASSOC));
        echo $f;
    }
    else if($identity == 29)
    {
        try {
            $claimline = (int)$_GET["claimline_id"];
            $stmt = $conn->prepare('SELECT mca_claim_id FROM claim_line WHERE id=:num');
            $stmt->bindParam(':num', $claimline, PDO::PARAM_STR);
            $stmt->execute();
            $claim_id=$stmt->fetchColumn();
            $selectDetails = $conn->prepare('DELETE FROM claim_line WHERE id=:num');
            $selectDetails->bindParam(':num', $claimline, PDO::PARAM_STR);
            $dd=$selectDetails->execute();
            if($dd==1)
            {
                amountsProcess($claim_id);
                echo "Successfully deleted";

            }
            else{
                echo "Failed to delete";
            }
        }
        catch (Exception $e){
            echo "There is an error";
        }
    }
    else if($identity == 30)
    {
        try {
            $claim_id = (int)validateXss($_GET["claim_id"]);
            $claim_number = validateXss($_GET["claim_number"]);
            $selectDetails = $conn->prepare('UPDATE claim SET claim_number1=:num1 WHERE claim_id=:num');
            $selectDetails->bindParam(':num', $claim_id, PDO::PARAM_STR);
            $selectDetails->bindParam(':num1', $claim_number, PDO::PARAM_STR);
            $nu= $selectDetails->execute();
            if($nu>0)
            {
                echo "Record Updated";
            }
            else{
                echo "Failed to update";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error";
        }

    }
    elseif($identity == 31 && $_SESSION['level'] != "gap_cover")
    {
        $claim_id=(int)$_GET["claim_id"];

        try {
            $date_entered="";
            $member_contacted="";
            $open="";

            $stmt = $conn->prepare('SELECT a.date_entered,a.member_contacted,a.Open,a.coding_checked,a.date_reopened,a.date_closed,b.client_id FROM claim as a INNER JOIN member as b ON a.member_id=b.member_id WHERE claim_id=:id');
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $stmt->execute();
            $re=$stmt->fetch();
            $date_entered=$re[0];
            $member_contacted=$re[1];
            $open=$re[2];
            $coding_checked=$re[3];
            $date_reopened=$re[4];
            $date_closed=$re[5];
            $client_id=$re[6];

            if($client_id==1) {
                if(strlen($date_closed)>10)
                {
                    $stmts = $conn->prepare('SELECT date_entered FROM `claim_line` WHERE mca_claim_id=:claim_id ORDER BY id DESC LIMIT 1');
                    $stmts->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
                    $stmts->execute();
                    $ytd = $stmts->fetchColumn();
                    $date_reopened=$date_reopened>$ytd?$date_reopened:$ytd;
                }

            }
            $date_entered = strlen($date_reopened)>10?$date_reopened:$date_entered;
            $holidays=array("01-01","03-21","04-19","04-22","04-27","05-01","06-17","08-09","09-24","12-16","12-25","12-26");
            $today = date('Y-m-d');
            $from_date1 = date('Y-m-d', strtotime($date_entered));
            $days=getWorkingDays($from_date1,$today,$holidays);
            if($days>=4 && $member_contacted != 1 && $open==1)
            {
                echo "<div class=\"uk-alert-danger\" uk-alert><a class=\"uk-alert-close\" uk-close> </a><p>Please update the Member/Broker as this case is 4 days (or more). </p>
                
                <label>Member/Broker Contacted? <input class=\"uk-checkbox\" id='contactmember' type=\"checkbox\" onclick='showhide(\"contactmember\",\"membspan\")'></label><span id='membspan' style='display: none'> <textarea class=\"uk-textarea\"  id='memtxt'></textarea><button class=\"uk-button uk-button-primary uk-button-small\"  onclick='updateMember(\"$claim_id\")'>Update</button></span></div>";


            }
        }
        catch (Exception $e)
        {
            echo "There is an error ".$e->getMessage();
        }

    }
    elseif($identity==32)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $username=$_SESSION['user_id'];
            $stmt = $conn->prepare('UPDATE claim SET member_contacted=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertNotes($claim_id,$txt,$username);
                echo "Updated";
            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    else if($identity == 33)
    {
        $ms=0;
        try {
            $del_id = (int)$_GET["del_id"];
            $username=$_SESSION['user_id'];
            $selectDetails = $conn->prepare('UPDATE discount_details SET status=:st,action_by=:act WHERE id=:num');
            $selectDetails->bindParam(':num', $del_id, PDO::PARAM_STR);
            $selectDetails->bindParam(':st', $ms, PDO::PARAM_STR);
            $selectDetails->bindParam(':act', $username, PDO::PARAM_STR);
            $ms=$selectDetails->execute();
        }
        catch (Exception $e){
            $ms=0;
        }
        echo $ms;
    }
    elseif($identity==35)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $stmt = $conn->prepare('UPDATE claim SET coding_checked=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                echo "Updated";
            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==36)
    {
        try {

            $doc_id=(int)$_GET["doc_id"];
            $author=$_GET["author"];
            $notes=$_GET["notes"];

            $stmt = $conn->prepare('INSERT INTO doctor_notes(doctor_id,description,entered_by) VALUES (:doctor_id,:description,:entered_by)');
            $stmt->bindParam(':doctor_id', $doc_id, PDO::PARAM_STR);
            $stmt->bindParam(':description', $notes, PDO::PARAM_STR);
            $stmt->bindParam(':entered_by', $author, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();

            echo $nu;
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==37)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $idx=$_GET["idx"];
            $stmt = $conn->prepare('UPDATE claim SET icd10_emergency=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertConfirm($claim_id,$txt,$idx);
                echo "Updated";

            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }
    }
    elseif($identity==38)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $idx=$_GET["idx"];
            $stmt = $conn->prepare('UPDATE claim SET provider_zf=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertConfirm($claim_id,$txt,$idx);
                echo "Updated";
            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==39)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $idx=$_GET["idx"];
            $stmt = $conn->prepare('UPDATE claim SET is_atheniest=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertConfirm($claim_id,$txt,$idx);
                echo "Updated";
            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==40)
    {
        try {

            $lead_id=(int)$_GET["lead_id"];
            $author=$_GET["author"];
            $notes=$_GET["notes"];

            $stmt = $conn->prepare('INSERT INTO lead_notes(lead_id,description,entered_by) VALUES (:lead_id,:description,:entered_by)');
            $stmt->bindParam(':lead_id', $lead_id, PDO::PARAM_STR);
            $stmt->bindParam(':description', $notes, PDO::PARAM_STR);
            $stmt->bindParam(':entered_by', $author, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();

            echo $nu;
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==41)
    {
        try {


            $claim_id=(int)$_GET["claim_id"];
            $ref1=$_GET["ref1"];

            $stmupd=$conn->prepare("UPDATE claim SET sla=:sla WHERE claim_id=:claim_id");
            $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmupd->bindParam(':sla', $ref1, PDO::PARAM_STR);
            $stmupd->execute();
            $nu=(int)$stmupd->execute();
            if($nu==1)
            {
                echo "Record successfully updated";
            }
            else
            {
                echo "Failed to update";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==42)
    {
        try {

            $claim_id=(int)$_GET["claim_id"];

            $stmupd=$conn->prepare("SELECT option_id,notes FROM confirm_options WHERE claim_id=:claim_id");
            $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmupd->execute();

            echo json_encode($stmupd->fetchAll(PDO::FETCH_ASSOC));
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==43)
    {
        try {

            $claim_id=(int)$_GET["claim_id"];
            $rr="xx";

            $data=getmyClaim($claim_id);
            if((int)$data[1]==6)
            {
                $username1=$data[0];
            }
            else
            {
                $username1=getUser();
                $rr="zzz";

            }
            $stmupd=$conn->prepare("UPDATE claim SET Open=1,username=:username WHERE claim_id=:claim_id");
            $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmupd->bindParam(':username', $username1, PDO::PARAM_STR);
            $rt=$stmupd->execute();
            if($rt==1)
            {
                if($rr=="zzz")
                {
                    updateUser($username1);
                }
                echo"<div class=\"uk-alert-success\" uk-alert>
    <a class=\"uk-alert-close\" uk-close></a>
    <p>Successfully allocated the claim to <b>$username1</b></p>
</div>";
            }
            else{
                echo "";         echo"<div class=\"uk-alert-success\" uk-alert>
    <a class=\"uk-alert-close\" uk-close></a>
    <p>Failed to allocate the claim</p>
</div>";
            }


        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==44)
    {
        try {

            $claim_id=(int)$_GET["claim_id"];
            $author=$_GET["author"];
            $notes=$_GET["notes"];
            $username=$_SESSION["user_id"];
            echo insertQANotes($claim_id,$notes,$username);
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==45)
    {
        try {
            $claim_id=(int)$_GET["claim_id"];
            $upd=(int)$_GET["upd"];
            $dt=date("Y-m-s H:i:s");
            $username=$_SESSION["user_id"];
            $notes="Claims Specialist accepted the outcome.";

            $stmupd=$conn->prepare("UPDATE quality_assurance SET cs_signed=:signed,cs_date=:cs_date WHERE claim_id=:claim_id");
            $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmupd->bindParam(':signed', $upd, PDO::PARAM_STR);
            $stmupd->bindParam(':cs_date', $dt, PDO::PARAM_STR);
            $rt=$stmupd->execute();
            if($rt==1)
            {
                echo "Successfully updated";
                insertQANotes($claim_id,$notes,$username);
            }
            else
            {
                echo "Failed to update";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==46)
    {
        try {

            $claim_id=(int)$_GET["claim_id"];
            $author=$_GET["author"];
            $notes=$_GET["notes"];
            $email=$_GET["email"];
            $claim_number=$_GET["claim_number"];
            $val=(int)$_GET["val"];

            $stmt = $conn->prepare('INSERT INTO intervention(claim_id,intervention_desc,owner) VALUES (:claim_id,:description,:entered_by)');
            $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmt->bindParam(':description', $notes, PDO::PARAM_STR);
            $stmt->bindParam(':entered_by', $author, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();
            if($val==7)
            {
                $stmupd=$conn->prepare("UPDATE claim SET Open=0,date_closed=Now() WHERE claim_id=:claim_id");
                $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
                $stmupd->execute();
            }
            //sendMail($email,$claim_number,$notes);
            echo $nu;
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }

    elseif($identity==47)
    {
        $str="Failed to update";
        try {

            $claim_id=(int)$_GET["claim_id"];
            $checklist=$_GET["checklist"];
            $val=$_GET["val"];

            $stmt = $conn->prepare('UPDATE aspen_checklist SET '.$checklist.'=:val WHERE claim_id=:claim_id');
            $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmt->bindParam(':val', $val, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();
            if($nu==1)
            {
                $str="Successfully Updated";
            }

        }
        catch (Exception $e)
        {
            $str="There is an error : ".$e->getMessage();
        }
        echo $str;
    }

    elseif($identity==48)
    {
        $str="Failed to update";
        try {

            $claim_id=(int)$_GET["claim_id"];
            $practice_number=$_GET["practice_number"];
            $val=(int)$_GET["val"];
            $valTick=$_GET["valTick"];
            $sql="UPDATE doctors SET prescription=:val WHERE practice_number=:practice_number AND claim_id=:claim_id";
            if($val==2)
            {
                $sql="UPDATE doctors SET administering=:val WHERE practice_number=:practice_number AND claim_id=:claim_id";
            }

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmt->bindParam(':practice_number', $practice_number, PDO::PARAM_STR);
            $stmt->bindParam(':val', $valTick, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();
            if($nu==1)
            {
                $str="Successfully Updated";
            }

        }
        catch (Exception $e)
        {
            $str="There is an error : ".$e->getMessage();
        }
        echo $str;
    }
    elseif($identity==49)
    {
        $str="Failed to update";
        try {

            $claim_id=(int)$_GET["claim_id"];
            $status=$_GET["status"];
            $reason=$_GET["reason"];

            $stmt = $conn->prepare('UPDATE aspen_checklist SET status=:status,reason=:reason WHERE claim_id=:claim_id');
            $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmt->bindParam(':status', $status, PDO::PARAM_STR);
            $stmt->bindParam(':reason', $reason, PDO::PARAM_STR);
            $nu=(int)$stmt->execute();
            if($nu==1)
            {
                $str="Successfully Updated";
            }

        }
        catch (Exception $e)
        {
            $str="There is an error : ".$e->getMessage();
        }
        echo $str;
    }
    elseif($identity==50)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $idx=$_GET["idx"];
            $stmt = $conn->prepare('UPDATE claim SET saoa=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertConfirm($claim_id,$txt,$idx);
                echo "Updated";

            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    elseif($identity==51)
    {
        try {

            $doc=$_GET["doc"];
            $claim_id=$_GET["claim_id"];
            $txt=$_GET["txt"];
            $idx=$_GET["idx"];
            $stmt = $conn->prepare('UPDATE claim SET tarrif_0614=:doc WHERE claim_id=:id');
            $stmt->bindParam(':doc', $doc, PDO::PARAM_STR);
            $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
            $nu=$stmt->execute();
            if($nu==1)
            {
                insertConfirm($claim_id,$txt,$idx);
                echo "Updated";
            }
            else
            {
                echo "Failed";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
    else if ($identity == 52) {

        $id = validateXss($_GET['textid']);
        $note = $_GET['text'];
        $note = filter_var($_GET['text'], FILTER_SANITIZE_STRING);
        $note=htmlspecialchars($note);
        $note=my_utf8_decode($note);
        $note=trim($note);
        $entered_by=$_SESSION["user_id"];
        $data=getmyClaim($id);
        $email=$data[2];
        $claim_number=$data[3];
        $subject="Update on claim [$claim_number]";
        $copied_email="shirley@medclaimassist.co.za";
        $body="Hi<br><br>Update on claim : <br><br><b>$note</b><br><br>Medclaim Assist Team";

        try {

            $stmt1 = $conn->prepare('INSERT INTO `eightdays`(`description`,`claim_id`,`entered_by`) VALUES(:description,:claim_id,:entered_by)');
            $stmt1->bindParam(':description', $note, PDO::PARAM_STR);
            $stmt1->bindParam(':claim_id', $id, PDO::PARAM_STR);
            $stmt1->bindParam(':entered_by', $entered_by, PDO::PARAM_STR);
            $nu = $stmt1->execute();
            if ($nu == 1) {
                sendMail5($email,$copied_email,$subject,$body);
                echo "<b style='color: green'>Updated!!!</b>";
            } else {
                echo "<b style='color: red'>Failed!!!</b>";
            }
        } catch (Exception $e) {
            echo "<b style='color: red'>There is an error!!!</b>";
        }
    }
    else if ($identity == 53) {

        $id = validateXss($_GET['id']);


        try {

            $stmt1 = $conn->prepare('SELECT description,date_entered,entered_by FROM `eightdays` WHERE claim_id=:claim_id');
            $stmt1->bindParam(':claim_id', $id, PDO::PARAM_STR);
            $stmt1->execute();
            $ccount=$stmt1->rowCount();
            if ($ccount>0) {
                $st="";
                foreach($stmt1->fetchAll() as $row)
                {
                    $date_entered=$row[1];
                    $description=$row[0];
                    $entered_by=$row[2];
                    $st.="<h4>Date Entered : $date_entered | Entered By : $entered_by</h4><p><hr> $description<hr></p>";

                }
                echo $st;
            } else {
                echo "<b style='color: red'>No Notes!!!</b>";
            }
        } catch (Exception $e) {
            echo "<b style='color: red'>There is an error!!!</b>";
        }
    }
    elseif($identity==54)
    {
        try {


            $claim_id=(int)$_GET["claim_id"];
            $ref1=$_GET["ref1"];

            $stmupd=$conn->prepare("UPDATE claim SET eightdays=:sla WHERE claim_id=:claim_id");
            $stmupd->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
            $stmupd->bindParam(':sla', $ref1, PDO::PARAM_STR);
            $stmupd->execute();
            $nu=(int)$stmupd->execute();
            if($nu==1)
            {
                echo "Record successfully updated";
            }
            else
            {
                echo "Failed to update";
            }
        }
        catch (Exception $e)
        {
            echo "There is an error : ".$e->getMessage();
        }

    }
}
else
{
    echo "<b style='color: red'>Invalid Access</b>";
}
function getmyClaim($claim_id)
{
    global $conn;
    $sql = $conn->prepare('SELECT a.username,b.client_id,c.email,a.claim_number FROM claim as a INNER JOIN member as b ON a.member_id=b.member_id INNER JOIN users_information as c ON a.username=c.username WHERE a.claim_id=:claim');
    $sql->bindParam(':claim', $claim_id, PDO::PARAM_STR);
    $sql->execute();
    return $sql->fetch();
}
function getUser()
{
    global $conn;
    $sql = $conn->prepare('SELECT username FROM users_information WHERE status=1 ORDER BY datetime ASC LIMIT 1');
    $sql->execute();
    return $sql->fetchColumn();
}
function getClaimId($claimNum)
{
    global $conn;
    $cNum="";

    $sql = $conn->prepare('SELECT claim_id FROM claim WHERE claim_number=:claim');
    $sql->bindParam(':claim', $claimNum, PDO::PARAM_STR);
    $sql->execute();
    $nu = $sql->rowCount();

    if ($nu > 0) {

        foreach ($sql->fetchAll() as $row) {
            $cNum=$row[0];
        }
    }
    else{
        $cNum="Invalid Code";
    }
    return $cNum;
}
function updateUser($username)
{
    global $conn;
    $dat=date('Y-m-d H:i:s');
    $sql = $conn->prepare('UPDATE users_information SET datetime=:dat WHERE username=:user1');
    $sql->bindParam(':user1', $username, PDO::PARAM_STR);
    $sql->bindParam(':dat', $dat, PDO::PARAM_STR);
    $sql->execute();

}
function checkDuplicate($input,$oldpass)
{
    $hash = password_hash($input, PASSWORD_BCRYPT);
    $arr = array_reverse(explode(',',$oldpass));
    $rr1 = array();
    $h=array();
    $count = 0;
    $mess = "";
    for ($i = 0; $i < count($arr); $i++) {
        if ($i < 6) {
            if (password_verify($input,$arr[$i])) {
                $count = 1;
            }

            else {

                array_push($rr1, $arr[$i]);

            }

        }
    }
    if ($count == 0) {
        $h=array_reverse($rr1);
        array_push($h,$hash);
        $mess = implode(',', $h);
    } else {
        $mess = "duplicate";
    }

    return $mess;
}

function checkOwner($x_id,$idd)
{
    global $conn;
    $ret=false;

    if($idd==1)
    {
        $stmt1 = $conn->prepare('SELECT b.username FROM intervention as a INNER JOIN claim as b ON a.claim_id=b.claim_id WHERE intervention_id = :num');
        $stmt1->bindParam(':num', $x_id, PDO::PARAM_STR);
        $stmt1->execute();
        $count=$stmt1->rowCount();
        if($count>0)
        {
            $sys_username=$stmt1->fetchColumn();
            if($_SESSION['level'] == "admin" || $_SESSION['user_id']==$sys_username)
            {
                $ret=true;
            }

        }
        else{
            $ret=false;
        }

    }
    else if ($idd==2)
    {
        $stmt1 = $conn->prepare('SELECT username FROM claim WHERE claim_id = :num');
        $stmt1->bindParam(':num', $x_id, PDO::PARAM_STR);
        $stmt1->execute();
        $count=$stmt1->rowCount();
        if($count>0)
        {
            $sys_username=$stmt1->fetchColumn();
            if($_SESSION['level'] == "admin" || $_SESSION['user_id']==$sys_username)
            {
                $ret=true;
            }
        }
        else{
            $ret=false;
        }

    }
    else
    {
        $ret=false;
    }


    return $ret;
}

function checkPmb($icd10)
{
    global $conn2;
    $mess="N";
    $stmt = $conn2->prepare('SELECT `diag_code`,`pmb_code`,`shortdesc` FROM `Diagnosis` WHERE diag_code=:num UNION SELECT `ICD10_Code`,`pmb`,`ICD10_3_Code_Desc` FROM `diagonisis1`  WHERE ICD10_Code=:num');
    $stmt->bindParam(':num', $icd10, PDO::PARAM_STR);
    $stmt->execute();
    $nu=$stmt->rowCount();
    if($nu>0) {
        $row=$stmt->fetch();
        $pmbCode= $row[1];
        if($pmbCode=="")
        {
            $mess="N";
        }
        else
        {
            $mess="Y";
        }
    }
    return $mess;
}
function checkBenefit($code)
{
    global $conn;
    $mess["lng"]="---";
    $mess["shrt"]="---";
    $stmt = $conn->prepare('SELECT *from rejection_codes WHERE remark_code=:num');
    $stmt->bindParam(':num', $code, PDO::PARAM_STR);
    $stmt->execute();
    $nu=$stmt->rowCount();
    if($nu>0) {
        $row=$stmt->fetch();


        $mess["lng"]=$row[1];
        $mess["shrt"]=$row[2];


    }
    return $mess;
}

function checkMofifier($claim_id,$practice_number,$practicetype)
{
    $check="Check";
    $count=0;

    try {
        if($practicetype=="14") {
            global $conn;

            $sqlDoc = $conn->prepare('SELECT id,mca_claim_id,practice_number,tariff_code FROM claim_line WHERE mca_claim_id=:claim AND practice_number=:prac');
            $sqlDoc->bindParam(':claim', $claim_id, PDO::PARAM_STR);
            $sqlDoc->bindParam(':prac', $practice_number, PDO::PARAM_STR);
            $sqlDoc->execute();

            foreach ($sqlDoc->fetchAll() as $row) {
                $modifier = $row[3];
                $arr=["0109"];
                if(!empty($modifier))
                {
                    if(!in_array($modifier,$arr))
                    {
                        $count++;
                    }

                }
                $modifier5 = "0005";
                //$sub = (int)substr($modifier, 0, 1);

                if ($modifier5 == $modifier) {
                    $count=-100;
                }
            }
        }
        else
        {
            $check = "No";
        }
        if($count<2)
        {
            $check = "No";
        }
    }
    catch (Exception $d) {

    }
    return $check;
}
function updateDoctor($claim_id,$practice_number,$cpt4)
{
    global  $conn;
    $stmt=$conn->prepare('UPDATE doctors SET cpt_code=:cpt_code WHERE claim_id=:id AND practice_number=:prac');
    $stmt->bindParam(':id', $claim_id, PDO::PARAM_STR);
    $stmt->bindParam(':prac', $practice_number, PDO::PARAM_STR);
    $stmt->bindParam(':cpt_code', $cpt4, PDO::PARAM_STR);
    $stmt->execute();

}
function checkAllDoctors($claim_id)
{
    global $conn;
    global $conn1;
    global $conn2;
    $desipline_codes=["56","57","58","59","056","057","058","059"];


    $mycp="";
    $stmt=$conn->prepare('SELECT claim_id,practice_number,cpt_code FROM doctors WHERE claim_id=:id');
    $stmt->bindParam(':id',$claim_id,PDO::PARAM_STR);
    $stmt->execute();
    foreach ($stmt->fetchAll() as $row)
    {
        $practice_number=$row[1];
        $cp=$row[2];

        $stmt1=$conn1->prepare('SELECT disciplinecode FROM person WHERE practiceno like :num UNION 
SELECT disciplinecode FROM organisation WHERE practiceno like :num');
        $stmt1->bindParam(':num',$practice_number,PDO::PARAM_STR);
        $stmt1->execute();
        $mydescpline=$stmt1->fetchColumn();

        if (in_array($mydescpline,$desipline_codes))
        {

            $mycp=$row[2]."---".$cp;
        }


    }
    return $mycp;
}
function checkDoctor1($myprac,$cpt)
{
    global $conn;
    global $conn1;
    global $conn2;
    $desipline_codes=["56","57","58","59","056","057","058","059"];
    $tr="TRCP";
    $stmt2=$conn1->prepare('SELECT disciplinecode FROM person WHERE practiceno like :num UNION 
SELECT disciplinecode FROM organisation WHERE practiceno like :num');
    $stmt2->bindParam(':num',$myprac,PDO::PARAM_STR);
    $stmt2->execute();
    $mydescpline=$stmt2->fetchColumn();
    if(in_array($mydescpline,$desipline_codes)) {

        $stmt1 = $conn2->prepare('SELECT *FROM ClinicalXref WHERE clinical_xref=:xref AND xref_type=:typ');
        $stmt1->bindParam(':xref', $cpt, PDO::PARAM_STR);
        $stmt1->bindParam(':typ', $tr, PDO::PARAM_STR);
        $stmt1->execute();
        $nu = $stmt1->rowCount();
        if($nu<1)
        {
            die("Please enter the correct CPT4");
        }
    }
}
function checkDoctor2($myprac)
{
    global $conn1;

    $check=false;
    $desipline_codes=["56","57","58","59","056","057","058","059"];
    $stmt2=$conn1->prepare('SELECT disciplinecode FROM person WHERE practiceno like :num UNION 
SELECT disciplinecode FROM organisation WHERE practiceno like :num');
    $stmt2->bindParam(':num',$myprac,PDO::PARAM_STR);
    $stmt2->execute();
    $mydescpline=$stmt2->fetchColumn();
    if(in_array($mydescpline,$desipline_codes))
    {
        $check=true;
    }
    return $check;

}
function amountsProcess($claim_id)
{
    $data=getclaimLine($claim_id);
    $charged_amnt=(double)$data["charged_amnt"];
    $scheme_paid=(double)$data["scheme_paid"];
    $gap=$charged_amnt-$scheme_paid;
    $client_gap=$data["gap_aamount_line"];
    updateAmounts($claim_id,$charged_amnt,$scheme_paid,$gap,$client_gap);
}
function getclaimLine($claim_id)
{
    global $conn;
    $data["charged_amnt"]=0;
    $data["scheme_paid"]=0;
    $data["gap"]=0;
    $data["gap_aamount_line"]=0;
    $stmt=$conn->prepare("SELECT SUM(clmnline_charged_amnt),SUM(clmline_scheme_paid_amnt),SUM(gap),SUM(gap_aamount_line) FROM claim_line WHERE mca_claim_id=:claim_id");
    $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
    $stmt->execute();
    if($stmt->rowCount()>0)
    {
        $rr=$stmt->fetch();
        $data["charged_amnt"]=$rr[0];
        $data["scheme_paid"]=$rr[1];
        $data["gap"]=$rr[2];
        $data["gap_aamount_line"]=$rr[3];
    }

    return $data;
}

function updateAmounts($claim_id,$charged_amnt,$scheme_paid,$gap,$client_gap)
{
    global $conn;
    $stmt=$conn->prepare("UPDATE claim SET charged_amnt=:charged_amnt,scheme_paid=:scheme_paid,gap=:gap,client_gap=:client_gap WHERE claim_id=:claim_id");
    $stmt->bindParam(':claim_id', $claim_id, PDO::PARAM_STR);
    $stmt->bindParam(':charged_amnt', $charged_amnt, PDO::PARAM_STR);
    $stmt->bindParam(':scheme_paid', $scheme_paid, PDO::PARAM_STR);
    $stmt->bindParam(':gap', $gap, PDO::PARAM_STR);
    $stmt->bindParam(':client_gap', $client_gap, PDO::PARAM_STR);
    $stmt->execute();

}
function insertConfirm($claim_id,$notes,$option_id)
{
    global $conn;
    $stmt = $conn->prepare('INSERT INTO confirm_options(claim_id,notes,option_id) VALUES(:claim,:notes,:option_id)');
    $stmt->bindParam(':claim', $claim_id, PDO::PARAM_STR);
    $stmt->bindParam(':notes', $notes, PDO::PARAM_STR);
    $stmt->bindParam(':option_id', $option_id, PDO::PARAM_STR);
    $stmt->execute();
}
function insertNotes($claim_id,$notes,$username)
{
    global $conn;
    $stmt = $conn->prepare('INSERT INTO intervention(claim_id,intervention_desc, owner) VALUES(:claim,:notes,:owner)');
    $stmt->bindParam(':claim', $claim_id, PDO::PARAM_STR);
    $stmt->bindParam(':notes', $notes, PDO::PARAM_STR);
    $stmt->bindParam(':owner', $username, PDO::PARAM_STR);
    $stmt->execute();
}
function getWorkingDays($startDate,$endDate,$holidays)
{
    $endDate = strtotime($endDate);
    $startDate = strtotime($startDate);


    //The total number of days between the two dates. We compute the no. of seconds and divide it to 60*60*24
    //We add one to inlude both dates in the interval.
    $days = ($endDate - $startDate) / 86400 + 1;

    $no_full_weeks = floor($days / 7);
    $no_remaining_days = fmod($days, 7);

    //It will return 1 if it's Monday,.. ,7 for Sunday
    $the_first_day_of_week = date("N", $startDate);
    $the_last_day_of_week = date("N", $endDate);

    //---->The two can be equal in leap years when february has 29 days, the equal sign is added here
    //In the first case the whole interval is within a week, in the second case the interval falls in two weeks.
    if ($the_first_day_of_week <= $the_last_day_of_week) {
        if ($the_first_day_of_week <= 6 && 6 <= $the_last_day_of_week) $no_remaining_days--;
        if ($the_first_day_of_week <= 7 && 7 <= $the_last_day_of_week) $no_remaining_days--;
    }
    else {
        // (edit by Tokes to fix an edge case where the start day was a Sunday
        // and the end day was NOT a Saturday)

        // the day of the week for start is later than the day of the week for end
        if ($the_first_day_of_week == 7) {
            // if the start date is a Sunday, then we definitely subtract 1 day
            $no_remaining_days--;

            if ($the_last_day_of_week == 6) {
                // if the end date is a Saturday, then we subtract another day
                $no_remaining_days--;
            }
        }
        else {
            // the start date was a Saturday (or earlier), and the end date was (Mon..Fri)
            // so we skip an entire weekend and subtract 2 days
            $no_remaining_days -= 2;
        }
    }

    //The no. of business days is: (number of weeks between the two dates) * (5 working days) + the remainder
//---->february in none leap years gave a remainder of 0 but still calculated weekends between first and last day, this is one way to fix it
    $workingDays = $no_full_weeks * 5;
    if ($no_remaining_days > 0 )
    {
        $workingDays += $no_remaining_days;
    }

    //We subtract the holidays
    foreach($holidays as $holiday){
        $myholiday=date("Y")."-";
        $time_stamp=strtotime($myholiday.$holiday);
        //If the holiday doesn't fall in weekend
        if ($startDate <= $time_stamp && $time_stamp <= $endDate && date("N",$time_stamp) != 6 && date("N",$time_stamp) != 7)
            $workingDays--;
    }

    return $workingDays;
}

function getEncrpass()
{
    global  $conn;
    $stmt = $conn->prepare("SELECT notification_email,notification_password FROM email_configs");
    $stmt->execute();
    return $stmt->fetch();
}
function sendMail($email,$claim_number,$notes)
{
    global $mail;
    $data=getEncrpass();
    //$rr=$email."--".$claim_number."--".$notes."++++++".$data[0]."".$data[1];
    //echo $rr;
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
        //Server settings
        //$mail->SMTPDebug = 2;
        $body="Hi<br><br>The latest update on request number (<b>$claim_number</b>) :<br><br><b style='color: #0D3349'>$notes</b><br><br>MedClaim Assist";
        $subject="Update on request number [$claim_number]";
        $mail->isSMTP();                                      // Set mailer to use SMTP
        $mail->Host = 'smtp.gmail.com';  // Specify main and backup SMTP servers
        $mail->SMTPAuth = true;                               // Enable SMTP authentication
        $mail->Username = $data[0];                 // SMTP username
        $mail->Password = $data[1];                           // SMTP password
        $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
        $mail->Port = 587;                                    // TCP port to connect to

        //Recipients
        $mail->setFrom($data[0], 'Medclaim Assist');
        $mail->addAddress($email, 'MCA User');
        $mail->isHTML(true);                                  // Set email format to HTML
        $mail->Subject = $subject;
        $mail->Body = $body;
        //$mail->AddAttachment('../../mca/schemes/' . getConsentDetails($scheme, $spName));
        //$mail->send();

        if (!$mail->send()) {


        }
    }
}
function sendMail5($email,$copied_email,$subject,$body)
{
    global $mail;
    $data=getEncrpass();
    //$rr=$email."--".$claim_number."--".$notes."++++++".$data[0]."".$data[1];
    //echo $rr;
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
        //Server settings
        //$mail->SMTPDebug = 2;
        $mail->isSMTP();                                      // Set mailer to use SMTP
        $mail->Host = 'smtp.gmail.com';  // Specify main and backup SMTP servers
        $mail->SMTPAuth = true;                               // Enable SMTP authentication
        $mail->Username = $data[0];                 // SMTP username
        $mail->Password = $data[1];                           // SMTP password
        $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
        $mail->Port = 587;                                    // TCP port to connect to

        //Recipients
        $mail->setFrom($data[0], 'Medclaim Assist');
        $mail->addAddress($email, 'MCA User');
        $mail->addAddress($copied_email, 'MCA User');
        $mail->isHTML(true);                                  // Set email format to HTML
        $mail->Subject = $subject;
        $mail->Body = $body;
        //$mail->AddAttachment('../../mca/schemes/' . getConsentDetails($scheme, $spName));
        //$mail->send();

        if (!$mail->send()) {


        }
    }
}
?>