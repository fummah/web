{"ast":null,"code":"import PropTypes from 'prop-types';\nimport createConnector from \"../core/createConnector.js\";\n// @ts-ignore\nimport { getResults } from \"../core/indexUtils.js\";\nvar MAX_WILDCARD_FACETS = 20;\nexport default createConnector({\n  displayName: 'AlgoliaDynamicWidgets',\n  $$type: 'ais.dynamicWidgets',\n  defaultProps: {\n    transformItems: function transformItems(items) {\n      return items;\n    },\n    maxValuesPerFacet: 20\n  },\n  propTypes: {\n    transformItems: PropTypes.func,\n    facets: PropTypes.arrayOf(PropTypes.string),\n    maxValuesPerFacet: PropTypes.number\n  },\n  getProvidedProps: function getProvidedProps(props, _searchState, searchResults) {\n    var results = getResults(searchResults, {\n      ais: props.contextValue,\n      multiIndexContext: props.indexContextValue\n    });\n    if (props.facets && !(Array.isArray(props.facets) && props.facets.length <= 1 && (props.facets[0] === '*' || props.facets[0] === undefined))) {\n      throw new Error(\"The `facets` prop only accepts [] or [\\\"*\\\"], you passed \".concat(JSON.stringify(props.facets)));\n    }\n    if (!results) {\n      return {\n        attributesToRender: []\n      };\n    }\n    var facetOrder = results.renderingContent && results.renderingContent.facetOrdering && results.renderingContent.facetOrdering.facets && results.renderingContent.facetOrdering.facets.order || [];\n    var attributesToRender = props.transformItems(facetOrder, {\n      results: results\n    });\n    if (attributesToRender.length > MAX_WILDCARD_FACETS && !props.facets) {\n      // eslint-disable-next-line no-console\n      console.warn(\"More than \".concat(MAX_WILDCARD_FACETS, \" facets are requested to be displayed without explicitly setting which facets to retrieve. This could have a performance impact. Set \\\"facets\\\" to [] to do two smaller network requests, or explicitly to ['*'] to avoid this warning.\"));\n    }\n    if (props.maxValuesPerFacet < results._state.maxValuesPerFacet) {\n      // eslint-disable-next-line no-console\n      console.warn(\"The maxValuesPerFacet set by dynamic widgets (\".concat(props.maxValuesPerFacet, \") is smaller than one of the limits set by a widget (\").concat(results._state.maxValuesPerFacet, \"). This causes a mismatch in query parameters and thus an extra network request when that widget is mounted.\"));\n    }\n    return {\n      attributesToRender: attributesToRender\n    };\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props) {\n    return (props.facets || ['*']).reduce(function (acc, curr) {\n      return acc.addFacet(curr);\n    }, searchParameters.setQueryParameters({\n      maxValuesPerFacet: Math.max(props.maxValuesPerFacet || 0, searchParameters.maxValuesPerFacet || 0)\n    }));\n  }\n});","map":null,"metadata":{},"sourceType":"module"}