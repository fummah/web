{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\web\\\\aid\\\\src\\\\routes\\\\components\\\\dataEntry\\\\Upload\\\\Avatar.js\";\nimport React from \"react\";\nimport { Card, message, Upload } from \"antd\";\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\nfunction beforeUpload(file) {\n  const isJPG = file.type === 'image/jpeg';\n  if (!isJPG) {\n    message.error('You can only upload JPG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJPG && isLt2M;\n}\nclass Avatar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: false\n    };\n    this.handleChange = info => {\n      if (info.file.status === 'uploading') {\n        this.setState({\n          loading: true\n        });\n        return;\n      }\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, imageUrl => this.setState({\n          imageUrl,\n          loading: false\n        }));\n      }\n    };\n  }\n  render() {\n    const uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 52\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ant-upload-text\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n    const imageUrl = this.state.imageUrl;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      className: \"gx-card\",\n      title: \"Avatar\",\n      children: /*#__PURE__*/_jsxDEV(Upload, {\n        name: \"avatar\",\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: \"//jsonplaceholder.typicode.com/posts/\",\n        beforeUpload: beforeUpload,\n        onChange: this.handleChange,\n        children: imageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 23\n        }, this) : uploadButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Avatar;","map":{"version":3,"names":["React","Card","message","Upload","LoadingOutlined","PlusOutlined","jsxDEV","_jsxDEV","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","isJPG","type","error","isLt2M","size","Avatar","Component","constructor","args","state","loading","handleChange","info","status","setState","originFileObj","imageUrl","render","uploadButton","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","name","listType","showUploadList","action","onChange","src","alt"],"sources":["C:/wamp64/www/web/aid/src/routes/components/dataEntry/Upload/Avatar.js"],"sourcesContent":["import React from \"react\";\r\nimport {Card, message, Upload} from \"antd\";\r\nimport {LoadingOutlined, PlusOutlined} from '@ant-design/icons';\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener('load', () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJPG = file.type === 'image/jpeg';\r\n  if (!isJPG) {\r\n    message.error('You can only upload JPG file!');\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error('Image must smaller than 2MB!');\r\n  }\r\n  return isJPG && isLt2M;\r\n}\r\n\r\nclass Avatar extends React.Component {\r\n  state = {\r\n    loading: false,\r\n  };\r\n  handleChange = (info) => {\r\n    if (info.file.status === 'uploading') {\r\n      this.setState({loading: true});\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, imageUrl => this.setState({\r\n        imageUrl,\r\n        loading: false,\r\n      }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const uploadButton = (\r\n      <div>\r\n        {this.state.loading ? <LoadingOutlined/> : <PlusOutlined/>}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    const imageUrl = this.state.imageUrl;\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Avatar\">\r\n        <Upload\r\n          name=\"avatar\"\r\n          listType=\"picture-card\"\r\n          className=\"avatar-uploader\"\r\n          showUploadList={false}\r\n          action=\"//jsonplaceholder.typicode.com/posts/\"\r\n          beforeUpload={beforeUpload}\r\n          onChange={this.handleChange}\r\n        >\r\n          {imageUrl ? <img src={imageUrl} alt=\"\"/> : uploadButton}\r\n        </Upload>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Avatar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}