{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.GroupContext = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _configProvider = require(\"../config-provider\");\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar GroupContext = exports.GroupContext = /*#__PURE__*/React.createContext(null);\nvar InternalCheckboxGroup = function InternalCheckboxGroup(_a, ref) {\n  var defaultValue = _a.defaultValue,\n    children = _a.children,\n    _a$options = _a.options,\n    options = _a$options === void 0 ? [] : _a$options,\n    customizePrefixCls = _a.prefixCls,\n    className = _a.className,\n    style = _a.style,\n    onChange = _a.onChange,\n    restProps = __rest(_a, [\"defaultValue\", \"children\", \"options\", \"prefixCls\", \"className\", \"style\", \"onChange\"]);\n  var _React$useContext = React.useContext(_configProvider.ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction;\n  var _React$useState = React.useState(restProps.value || defaultValue || []),\n    _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n    value = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = (0, _slicedToArray2[\"default\"])(_React$useState3, 2),\n    registeredValues = _React$useState4[0],\n    setRegisteredValues = _React$useState4[1];\n  React.useEffect(function () {\n    if ('value' in restProps) {\n      setValue(restProps.value || []);\n    }\n  }, [restProps.value]);\n  var getOptions = function getOptions() {\n    return options.map(function (option) {\n      if (typeof option === 'string' || typeof option === 'number') {\n        return {\n          label: option,\n          value: option\n        };\n      }\n      return option;\n    });\n  };\n  var cancelValue = function cancelValue(val) {\n    setRegisteredValues(function (prevValues) {\n      return prevValues.filter(function (v) {\n        return v !== val;\n      });\n    });\n  };\n  var registerValue = function registerValue(val) {\n    setRegisteredValues(function (prevValues) {\n      return [].concat((0, _toConsumableArray2[\"default\"])(prevValues), [val]);\n    });\n  };\n  var toggleOption = function toggleOption(option) {\n    var optionIndex = value.indexOf(option.value);\n    var newValue = (0, _toConsumableArray2[\"default\"])(value);\n    if (optionIndex === -1) {\n      newValue.push(option.value);\n    } else {\n      newValue.splice(optionIndex, 1);\n    }\n    if (!('value' in restProps)) {\n      setValue(newValue);\n    }\n    var opts = getOptions();\n    onChange === null || onChange === void 0 ? void 0 : onChange(newValue.filter(function (val) {\n      return registeredValues.includes(val);\n    }).sort(function (a, b) {\n      var indexA = opts.findIndex(function (opt) {\n        return opt.value === a;\n      });\n      var indexB = opts.findIndex(function (opt) {\n        return opt.value === b;\n      });\n      return indexA - indexB;\n    }));\n  };\n  var prefixCls = getPrefixCls('checkbox', customizePrefixCls);\n  var groupPrefixCls = \"\".concat(prefixCls, \"-group\");\n  var domProps = (0, _omit[\"default\"])(restProps, ['value', 'disabled']);\n  if (options && options.length > 0) {\n    children = getOptions().map(function (option) {\n      return /*#__PURE__*/React.createElement(_Checkbox[\"default\"], {\n        prefixCls: prefixCls,\n        key: option.value.toString(),\n        disabled: 'disabled' in option ? option.disabled : restProps.disabled,\n        value: option.value,\n        checked: value.includes(option.value),\n        onChange: option.onChange,\n        className: \"\".concat(groupPrefixCls, \"-item\"),\n        style: option.style\n      }, option.label);\n    });\n  }\n  // eslint-disable-next-line react/jsx-no-constructed-context-values\n  var context = {\n    toggleOption: toggleOption,\n    value: value,\n    disabled: restProps.disabled,\n    name: restProps.name,\n    // https://github.com/ant-design/ant-design/issues/16376\n    registerValue: registerValue,\n    cancelValue: cancelValue\n  };\n  var classString = (0, _classnames[\"default\"])(groupPrefixCls, (0, _defineProperty2[\"default\"])({}, \"\".concat(groupPrefixCls, \"-rtl\"), direction === 'rtl'), className);\n  return /*#__PURE__*/React.createElement(\"div\", (0, _extends2[\"default\"])({\n    className: classString,\n    style: style\n  }, domProps, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(GroupContext.Provider, {\n    value: context\n  }, children));\n};\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(InternalCheckboxGroup);\nvar _default = exports[\"default\"] = /*#__PURE__*/React.memo(CheckboxGroup);","map":null,"metadata":{},"sourceType":"script"}