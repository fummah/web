{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\aid_f\\\\source\\\\src\\\\routes\\\\extensions\\\\charts\\\\amchart\\\\line\\\\Components\\\\LineChartWithScrollAndZoom.js\";\nimport React from \"react\";\nimport AmCharts from \"@amcharts/amcharts3-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChartWithScrollAndZoom = () => {\n  let chartData = generateChartData();\n  const config = {\n    \"type\": \"serial\",\n    \"theme\": \"light\",\n    \"marginRight\": 80,\n    \"autoMarginOffset\": 20,\n    \"marginTop\": 7,\n    \"dataProvider\": chartData,\n    \"valueAxes\": [{\n      \"axisAlpha\": 0.2,\n      \"dashLength\": 1,\n      \"position\": \"left\"\n    }],\n    \"mouseWheelZoomEnabled\": true,\n    \"graphs\": [{\n      \"id\": \"g1\",\n      \"balloonText\": \"[[value]]\",\n      \"bullet\": \"round\",\n      \"bulletBorderAlpha\": 1,\n      \"bulletColor\": \"#FFFFFF\",\n      \"hideBulletsCount\": 50,\n      \"title\": \"red line\",\n      \"valueField\": \"visits\",\n      \"useLineColorForBulletBorder\": true,\n      \"balloon\": {\n        \"drop\": true\n      }\n    }],\n    \"chartScrollbar\": {\n      \"autoGridCount\": true,\n      \"graph\": \"g1\",\n      \"scrollbarHeight\": 40\n    },\n    \"chartCursor\": {\n      \"limitToGraph\": \"g1\"\n    },\n    \"categoryField\": \"date\",\n    \"categoryAxis\": {\n      \"parseDates\": true,\n      \"axisColor\": \"#DADADA\",\n      \"dashLength\": 1,\n      \"minorGridEnabled\": true\n    },\n    \"export\": {\n      \"enabled\": true\n    }\n  };\n\n  // generate some random data, quite different range\n  function generateChartData() {\n    let chartData = [];\n    const firstDate = new Date();\n    firstDate.setDate(firstDate.getDate() - 5);\n    let visits = 1200;\n    for (var i = 0; i < 1000; i++) {\n      // we create date objects here. In your data, you can have date strings\n      // and then set format of your dates using chart.dataDateFormat property,\n      // however when possible, use date objects, as this will speed up chart rendering.\n      const newDate = new Date(firstDate);\n      newDate.setDate(newDate.getDate() + i);\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      chartData.push({\n        date: newDate,\n        visits: visits\n      });\n    }\n    return chartData;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AmCharts.React, {\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      options: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_c = LineChartWithScrollAndZoom;\nexport default LineChartWithScrollAndZoom;\nvar _c;\n$RefreshReg$(_c, \"LineChartWithScrollAndZoom\");","map":{"version":3,"names":["React","AmCharts","jsxDEV","_jsxDEV","LineChartWithScrollAndZoom","chartData","generateChartData","config","firstDate","Date","setDate","getDate","visits","i","newDate","Math","round","random","push","date","className","children","style","width","height","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/aid_f/source/src/routes/extensions/charts/amchart/line/Components/LineChartWithScrollAndZoom.js"],"sourcesContent":["import React from \"react\";\r\nimport AmCharts from \"@amcharts/amcharts3-react\";\r\n\r\nconst LineChartWithScrollAndZoom = () => {\r\n\r\n  let chartData = generateChartData();\r\n  const config = {\r\n    \"type\": \"serial\",\r\n    \"theme\": \"light\",\r\n    \"marginRight\": 80,\r\n    \"autoMarginOffset\": 20,\r\n    \"marginTop\": 7,\r\n    \"dataProvider\": chartData,\r\n    \"valueAxes\": [{\r\n      \"axisAlpha\": 0.2,\r\n      \"dashLength\": 1,\r\n      \"position\": \"left\"\r\n    }],\r\n    \"mouseWheelZoomEnabled\": true,\r\n    \"graphs\": [{\r\n      \"id\": \"g1\",\r\n      \"balloonText\": \"[[value]]\",\r\n      \"bullet\": \"round\",\r\n      \"bulletBorderAlpha\": 1,\r\n      \"bulletColor\": \"#FFFFFF\",\r\n      \"hideBulletsCount\": 50,\r\n      \"title\": \"red line\",\r\n      \"valueField\": \"visits\",\r\n      \"useLineColorForBulletBorder\": true,\r\n      \"balloon\": {\r\n        \"drop\": true\r\n      }\r\n    }],\r\n    \"chartScrollbar\": {\r\n      \"autoGridCount\": true,\r\n      \"graph\": \"g1\",\r\n      \"scrollbarHeight\": 40\r\n    },\r\n    \"chartCursor\": {\r\n      \"limitToGraph\": \"g1\"\r\n    },\r\n    \"categoryField\": \"date\",\r\n    \"categoryAxis\": {\r\n      \"parseDates\": true,\r\n      \"axisColor\": \"#DADADA\",\r\n      \"dashLength\": 1,\r\n      \"minorGridEnabled\": true\r\n    },\r\n    \"export\": {\r\n      \"enabled\": true\r\n    }\r\n  };\r\n\r\n  // generate some random data, quite different range\r\n  function generateChartData() {\r\n    let chartData = [];\r\n    const firstDate = new Date();\r\n    firstDate.setDate(firstDate.getDate() - 5);\r\n    let visits = 1200;\r\n    for (var i = 0; i < 1000; i++) {\r\n      // we create date objects here. In your data, you can have date strings\r\n      // and then set format of your dates using chart.dataDateFormat property,\r\n      // however when possible, use date objects, as this will speed up chart rendering.\r\n      const newDate = new Date(firstDate);\r\n      newDate.setDate(newDate.getDate() + i);\r\n\r\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\r\n\r\n      chartData.push({\r\n        date: newDate,\r\n        visits: visits\r\n      });\r\n    }\r\n    return chartData;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AmCharts.React style={{width: \"100%\", height: \"500px\"}} options={config}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineChartWithScrollAndZoom;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}