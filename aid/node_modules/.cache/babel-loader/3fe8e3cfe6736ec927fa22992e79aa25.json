{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\nvar _createClass3 = _interopRequireDefault(_createClass2);\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\nvar _inherits3 = _interopRequireDefault(_inherits2);\nvar _bind2 = require(\"lodash/bind\");\nvar _bind3 = _interopRequireDefault(_bind2);\nexports.withScriptjs = withScriptjs;\nvar _invariant = require(\"invariant\");\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _canUseDom = require(\"can-use-dom\");\nvar _canUseDom2 = _interopRequireDefault(_canUseDom);\nvar _recompose = require(\"recompose\");\nvar _propTypes = require(\"prop-types\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _react = require(\"react\");\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar LOADING_STATE_NONE = \"NONE\";\nvar LOADING_STATE_BEGIN = \"BEGIN\";\nvar LOADING_STATE_LOADED = \"LOADED\";\nfunction withScriptjs(BaseComponent) {\n  var factory = _react2.default.createFactory(BaseComponent);\n  var Container = function (_React$PureComponent) {\n    ;\n    (0, _inherits3.default)(Container, _React$PureComponent);\n    function Container() {\n      var _ref;\n      var _temp, _this, _ret;\n      (0, _classCallCheck3.default)(this, Container);\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Container.__proto__ || (0, _getPrototypeOf2.default)(Container)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        loadingState: LOADING_STATE_NONE\n      }, _this.isUnmounted = false, _this.handleLoaded = (0, _bind3.default)(_this.handleLoaded, _this), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);\n    }\n    ;\n    (0, _createClass3.default)(Container, [{\n      key: \"handleLoaded\",\n      value: function handleLoaded() {\n        if (this.isUnmounted) {\n          return;\n        }\n        this.setState({\n          loadingState: LOADING_STATE_LOADED\n        });\n      }\n    }, {\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        var _props = this.props,\n          loadingElement = _props.loadingElement,\n          googleMapURL = _props.googleMapURL;\n        (0, _invariant2.default)(!!loadingElement && !!googleMapURL, \"Required props loadingElement or googleMapURL is missing. You need to provide both of them.\");\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var loadingState = this.state.loadingState;\n        if (loadingState !== LOADING_STATE_NONE || !_canUseDom2.default) {\n          return;\n        }\n        this.setState({\n          loadingState: LOADING_STATE_BEGIN\n        });\n        // Don't load scriptjs as a dependency since we do not want this module be used on server side.\n        // eslint-disable-next-line global-require\n        var scriptjs = require(\"scriptjs\");\n        var googleMapURL = this.props.googleMapURL;\n        scriptjs(googleMapURL, this.handleLoaded);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.isUnmounted = true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _props2 = this.props,\n          loadingElement = _props2.loadingElement,\n          googleMapURL = _props2.googleMapURL,\n          restProps = (0, _objectWithoutProperties3.default)(_props2, [\"loadingElement\", \"googleMapURL\"]);\n        var loadingState = this.state.loadingState;\n        if (loadingState === LOADING_STATE_LOADED) {\n          return factory(restProps);\n        } else {\n          return loadingElement;\n        }\n      }\n    }]);\n    return Container;\n  }(_react2.default.PureComponent);\n  Container.displayName = \"withScriptjs(\" + (0, _recompose.getDisplayName)(BaseComponent) + \")\";\n  Container.propTypes = {\n    loadingElement: _propTypes2.default.node.isRequired,\n    googleMapURL: _propTypes2.default.string.isRequired\n  };\n  return Container;\n}\nexports.default = withScriptjs;","map":null,"metadata":{},"sourceType":"script"}