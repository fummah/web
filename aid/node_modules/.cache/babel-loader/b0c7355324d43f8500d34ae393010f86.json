{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\web\\\\aid\\\\src\\\\routes\\\\lists\\\\Doctors\\\\index.js\";\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport doctors from \"./data/doctors\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport DoctorList from \"components/lists/DoctorsList/DoctorList\";\nimport AddDoctor from \"components/lists/DoctorsList/AddDoctor/index\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport DoctorDetail from \"components/lists/DoctorsList/DoctorDetail/index\";\nimport IntlMessages from \"util/IntlMessages\";\nimport CircularProgress from \"../../../components/CircularProgress/index\";\nimport Auxiliary from \"../../../util/Auxiliary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Doctors extends PureComponent {\n  constructor() {\n    super();\n    this.DoctorSideBar = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gx-module-side\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-module-side-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gx-module-logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"icon icon-chat gx-mr-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(IntlMessages, {\n              id: \"sidebar.doctor.doctors\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-module-side-content\",\n          children: /*#__PURE__*/_jsxDEV(CustomScrollbars, {\n            className: \"gx-module-side-scroll\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gx-module-add-task\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"primary\",\n                className: \"gx-btn-block\",\n                onClick: () => {\n                  this.setState({\n                    addDoctor: true\n                  });\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"icon icon-add-circle gx-mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 15\n                }, this), \" Add Doctor\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"gx-module-nav\",\n              children: [this.getNavFolders(), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"gx-module-nav-label\",\n                children: /*#__PURE__*/_jsxDEV(IntlMessages, {\n                  id: \"sidebar.doctor.doctors\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 13\n              }, this), this.getNavFilters(), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"gx-module-nav-label\",\n                children: /*#__PURE__*/_jsxDEV(IntlMessages, {\n                  id: \"sidebar.doctor.doctors\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 13\n              }, this), this.getNavLabels()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }, this);\n    };\n    this.onDeleteDoctor = () => {\n      const doctors = this.state.allDoctor.map(doctor => doctor.selected && doctor.folder === this.state.selectedFolder ? {\n        ...doctor,\n        folder: 4,\n        selected: false\n      } : doctor);\n      this.setState({\n        alertMessage: 'Doctor Deleted Successfully',\n        showMessage: true,\n        selectedDoctors: 0,\n        allDoctor: doctors,\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n    };\n    this.getNavFolders = () => {\n      return folders.map((folder, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => {\n          const filterDoctors = this.state.allDoctor.filter(doctor => doctor.folder === folder.id);\n          this.setState({\n            selectedFolder: folder.id,\n            noContentFoundMessage: 'No Doctor found in selected folder',\n            currentDoctor: null,\n            loader: true,\n            folderDoctors: filterDoctors\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `icon icon-${folder.icon}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: folder.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this));\n    };\n    this.onFolderMenuItemSelect = e => {\n      const id = +e.key;\n      const doctors = this.state.allDoctor.map(doctor => doctor.selected && doctor.folder === this.state.selectedFolder ? {\n        ...doctor,\n        folder: id,\n        selected: false\n      } : doctor);\n      this.setState({\n        selectedDoctors: 0,\n        allDoctor: doctors,\n        noContentFoundMessage: 'No Doctor found in selected folder',\n        alertMessage: 'Doctor has been moved successfully',\n        showMessage: true,\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n    };\n    this.onLabelMenuItemSelect = e => {\n      const id = +e.key;\n      const doctors = this.state.allDoctor.map(doctor => {\n        if (doctor.selected && doctor.folder === this.state.selectedFolder) {\n          if (doctor.labels.includes(id)) {\n            return {\n              ...doctor,\n              labels: this.removeLabel(doctor, id)\n            };\n          } else {\n            return {\n              ...doctor,\n              labels: this.addLabel(doctor, id)\n            };\n          }\n        } else {\n          return doctor;\n        }\n      });\n      this.setState({\n        noContentFoundMessage: 'No Doctor found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allDoctor: doctors,\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n    };\n    this.handleRequestClose = () => {\n      this.setState({\n        addDoctor: false,\n        showMessage: false\n      });\n    };\n    this.getNavFilters = () => {\n      return filters.map((filter, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => {\n          const filterDoctors = this.state.allDoctor.filter(doctor => {\n            if (filter.id === 0 && doctor.starred && doctor.folder === this.state.selectedFolder) {\n              return doctor;\n            } else if (filter.id === 1 && doctor.important && doctor.folder === this.state.selectedFolder) {\n              return doctor;\n            }\n            return null;\n          });\n          this.setState({\n            noContentFoundMessage: 'No Doctor found in selected filter',\n            loader: true,\n            folderDoctors: filterDoctors\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gx-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `icon icon-${filter.icon}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: filter.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this));\n    };\n    this.onOptionMenuItemSelect = e => {\n      switch (e.key) {\n        case 'All':\n          this.handleRequestClose();\n          this.getallDoctor();\n          break;\n        case 'None':\n          this.handleRequestClose();\n          this.getUnselectedallDoctor();\n          break;\n        case 'Read':\n          this.handleRequestClose();\n          this.getReadDoctor();\n          break;\n        case 'Unread':\n          this.handleRequestClose();\n          this.getUnreadDoctor();\n          break;\n        case 'Starred':\n          this.handleRequestClose();\n          this.getStarredDoctor();\n          break;\n        case 'Unstarred':\n          this.handleRequestClose();\n          this.getUnStarredDoctor();\n          break;\n        case 'Important':\n          this.handleRequestClose();\n          this.getImportantDoctor();\n          break;\n        case 'Unimportant':\n          this.handleRequestClose();\n          this.getUnimportantDoctor();\n          break;\n        default:\n          break;\n      }\n    };\n    this.getallDoctor = () => {\n      let doctors = this.state.allDoctor.map(doctor => doctor.folder === this.state.selectedFolder ? {\n        ...doctor,\n        selected: true\n      } : doctor);\n      this.setState({\n        selectedDoctors: doctors.length,\n        allDoctor: doctors,\n        optionName: 'All',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n    };\n    this.getUnselectedallDoctor = () => {\n      let doctors = this.state.allDoctor.map(doctor => doctor.folder === this.state.selectedFolder ? {\n        ...doctor,\n        selected: false\n      } : doctor);\n      this.setState({\n        selectedDoctors: 0,\n        allDoctor: doctors,\n        optionName: 'None',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n    };\n    this.getReadDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (doctor.read) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'Read',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getUnreadDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (!doctor.read) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'Unread',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getStarredDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (doctor.starred) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'Starred',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getUnStarredDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (!doctor.starred) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'UnStarred',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getImportantDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (doctor.important) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'Important',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getUnimportantDoctor = () => {\n      let selectedDoctor = 0;\n      let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\n      doctors = doctors.map(doctor => {\n        if (!doctor.important) {\n          selectedDoctor++;\n          return {\n            ...doctor,\n            selected: true\n          };\n        }\n        return {\n          ...doctor,\n          selected: false\n        };\n      });\n      this.setState({\n        selectedDoctors: selectedDoctor,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Doctor found in selected Label',\n        folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\n      });\n      return doctors;\n    };\n    this.getNavLabels = () => {\n      return labels.map((label, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => {\n          const filterDoctors = this.state.allDoctor.filter(doctor => doctor.labels.includes(label.id) && doctor.folder === this.state.selectedFolder);\n          this.setState({\n            loader: true,\n            noContentFoundMessage: 'No Doctor found in selected label',\n            folderDoctors: filterDoctors\n          });\n          setTimeout(() => {\n            this.setState({\n              loader: false\n            });\n          }, 1500);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"gx-link\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: `icon icon-tag gx-text-${label.color}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: label.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 7\n      }, this));\n    };\n    this.searchDoctor = searchText => {\n      if (searchText === '') {\n        this.setState({\n          folderDoctors: this.state.allDoctor.filter(doctor => !doctor.deleted)\n        });\n      } else {\n        const searchDoctors = this.state.allDoctor.filter(doctor => !doctor.deleted && doctor.practice_number.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n        this.setState({\n          folderDoctors: searchDoctors\n        });\n      }\n    };\n    this.displayDoctor = (currentDoctor, folderDoctors, noContentFoundMessage) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gx-module-box-column\",\n        children: currentDoctor === null ? folderDoctors.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\",\n          children: noContentFoundMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(DoctorList, {\n          doctors: folderDoctors,\n          onStartSelect: this.onStartSelect.bind(this),\n          onDoctorSelect: this.onDoctorSelect.bind(this),\n          onDoctorChecked: this.onDoctorChecked.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(DoctorDetail, {\n          doctor: currentDoctor,\n          onStartSelect: this.onStartSelect.bind(this),\n          onImportantSelect: this.onImportantSelect.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }, this);\n    };\n    this.getDoctorActions = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          overlay: this.folderMenu(),\n          placement: \"bottomRight\",\n          trigger: ['click'],\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon icon-folder gx-icon-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          overlay: this.labelMenu(),\n          placement: \"bottomRight\",\n          trigger: ['click'],\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon icon-tag gx-icon-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: this.onDeleteDoctor.bind(this),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"icon icon-trash gx-icon-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 12\n      }, this);\n    };\n    this.optionMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"option-menu\",\n      onClick: this.onOptionMenuItemSelect.bind(this),\n      children: options.map(option => /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: option.title\n      }, option.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }, this);\n    this.folderMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"folder-menu\",\n      onClick: this.onFolderMenuItemSelect.bind(this),\n      children: folders.map(folder => /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: folder.title\n      }, folder.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 5\n    }, this);\n    this.labelMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"label-menu\",\n      onClick: this.onLabelMenuItemSelect.bind(this),\n      children: labels.map(label => /*#__PURE__*/_jsxDEV(Menu.Item, {\n        children: label.title\n      }, label.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 5\n    }, this);\n    this.state = {\n      searchDoctor: '',\n      noContentFoundMessage: 'No Doctor found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allDoctor: doctors,\n      loader: true,\n      currentDoctor: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: \"https://via.placeholder.com/150\"\n      },\n      selectedDoctors: 0,\n      selectedFolder: 0,\n      addDoctor: false,\n      folderDoctors: doctors.filter(doctor => doctor.folder === 0)\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n  onDoctorChecked(data) {\n    data.selected = !data.selected;\n    let selectedDoctor = 0;\n    const doctors = this.state.folderDoctors.map(doctor => {\n      if (doctor.selected) {\n        selectedDoctor++;\n      }\n      if (doctor.id === data.id) {\n        if (doctor.selected) {\n          selectedDoctor++;\n        }\n        return data;\n      } else {\n        return doctor;\n      }\n    });\n    this.setState({\n      selectedDoctors: selectedDoctor,\n      folderDoctors: doctors\n    });\n  }\n  onAllDoctorSelect() {\n    const selectAll = this.state.selectedDoctors <= this.state.folderDoctors.length;\n    if (selectAll) {\n      this.getAllDoctor();\n    } else {\n      this.getUnselectedAllDoctor();\n    }\n  }\n  removeLabel(doctor, label) {\n    doctor.labels.splice(doctor.labels.indexOf(label), 1);\n    if (this.state.currentDoctor !== null && doctor.id === this.state.currentDoctor.id) {\n      this.setState({\n        currentDoctor: {\n          ...doctor,\n          labels: doctor.labels\n        }\n      });\n    }\n    return doctor.labels;\n  }\n  onStartSelect(data) {\n    data.starred = !data.starred;\n    this.setState({\n      alertMessage: data.starred ? 'Doctor Mark as Active' : 'Doctor Remove as Active',\n      showMessage: true,\n      folderDoctors: this.state.folderDoctors.map(doctor => doctor.id === data.id ? data : doctor)\n    });\n  }\n  onImportantSelect(data) {\n    data.important = !data.important;\n    this.setState({\n      alertMessage: data.important ? 'Doctor Mark as Important' : 'Doctor Remove as Important',\n      showMessage: true,\n      folderDoctors: this.state.folderDoctors.map(doctor => doctor.id === data.id ? data : doctor)\n    });\n  }\n  onDoctorSend(data) {\n    this.setState({\n      alertMessage: 'Doctor Sent Successfully',\n      showMessage: true,\n      folderDoctors: this.state.allDoctor.concat(data),\n      allDoctor: this.state.allDoctor.concat(data)\n    });\n  }\n  onDoctorSelect(doctor) {\n    this.setState({\n      loader: true,\n      currentDoctor: doctor\n    });\n    setTimeout(() => {\n      this.setState({\n        loader: false\n      });\n    }, 1500);\n  }\n  addLabel(doctor, label) {\n    if (this.state.currentDoctor !== null && doctor.id === this.state.currentDoctor.id) {\n      this.setState({\n        currentDoctor: {\n          ...doctor,\n          labels: doctor.labels.concat(label)\n        }\n      });\n    }\n    return doctor.labels.concat(label);\n  }\n  updateSearch(evt) {\n    this.setState({\n      searchDoctor: evt.target.value\n    });\n    this.searchDoctor(evt.target.value);\n  }\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n  render() {\n    const {\n      selectedDoctors,\n      loader,\n      currentDoctor,\n      drawerState,\n      folderDoctors,\n      addDoctor,\n      user,\n      alertMessage,\n      showMessage,\n      noContentFoundMessage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gx-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gx-app-module\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-d-block gx-d-lg-none\",\n          children: /*#__PURE__*/_jsxDEV(Drawer, {\n            placement: \"left\",\n            closable: false,\n            visible: drawerState,\n            onClose: this.onToggleDrawer.bind(this),\n            children: this.DoctorSideBar()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\",\n          children: this.DoctorSideBar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gx-module-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gx-module-box-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"icon icon-menu gx-icon-btn\",\n                \"aria-label\": \"Menu\",\n                onClick: this.onToggleDrawer.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(AppModuleHeader, {\n              placeholder: \"Search Doctors\",\n              user: this.state.user,\n              onChange: this.updateSearch.bind(this),\n              value: this.state.searchDoctor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gx-module-box-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gx-module-box-topbar\",\n              children: [this.state.currentDoctor === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"gx-flex-row gx-align-items-center\",\n                children: this.state.folderDoctors.length > 0 ? /*#__PURE__*/_jsxDEV(Auxiliary, {\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    color: \"primary\",\n                    className: \"gx-icon-btn\",\n                    indeterminate: selectedDoctors > 0 && selectedDoctors < folderDoctors.length,\n                    checked: selectedDoctors > 0,\n                    onChange: this.onAllDoctorSelect.bind(this),\n                    value: \"SelectDoctor\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 617,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n                    overlay: this.optionMenu(),\n                    placement: \"bottomRight\",\n                    trigger: ['click'],\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"gx-px-2\",\n                        children: [\" \", this.state.optionName]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 625,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"icon icon-charvlet-down\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 626,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 624,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 623,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 23\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"icon icon-arrow-left gx-icon-btn\",\n                onClick: () => {\n                  this.setState({\n                    currentDoctor: null\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                classID: \"toolbar-separator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 637,\n                columnNumber: 17\n              }, this), selectedDoctors > 0 && this.getDoctorActions()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 612,\n              columnNumber: 15\n            }, this), loader ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gx-loader-view\",\n              children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 17\n            }, this) : this.displayDoctor(currentDoctor, folderDoctors, noContentFoundMessage), /*#__PURE__*/_jsxDEV(AddDoctor, {\n              open: addDoctor,\n              user: user,\n              onClose: this.handleRequestClose.bind(this),\n              onDoctorSend: this.onDoctorSend.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), showMessage && message.info( /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"message-id\",\n        children: alertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 38\n      }, this), 3, this.handleRequestClose)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Doctors;","map":{"version":3,"names":["React","PureComponent","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","doctors","folders","filters","labels","options","DoctorList","AddDoctor","AppModuleHeader","DoctorDetail","IntlMessages","CircularProgress","Auxiliary","jsxDEV","_jsxDEV","Doctors","constructor","DoctorSideBar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onClick","setState","addDoctor","getNavFolders","getNavFilters","getNavLabels","onDeleteDoctor","state","allDoctor","map","doctor","selected","folder","selectedFolder","alertMessage","showMessage","selectedDoctors","folderDoctors","filter","index","filterDoctors","noContentFoundMessage","currentDoctor","loader","setTimeout","icon","title","onFolderMenuItemSelect","e","key","onLabelMenuItemSelect","includes","removeLabel","addLabel","handleRequestClose","starred","important","onOptionMenuItemSelect","getallDoctor","getUnselectedallDoctor","getReadDoctor","getUnreadDoctor","getStarredDoctor","getUnStarredDoctor","getImportantDoctor","getUnimportantDoctor","length","optionName","selectedDoctor","read","label","color","searchDoctor","searchText","deleted","searchDoctors","practice_number","toLowerCase","indexOf","displayDoctor","onStartSelect","bind","onDoctorSelect","onDoctorChecked","onImportantSelect","getDoctorActions","overlay","folderMenu","placement","trigger","labelMenu","optionMenu","option","Item","drawerState","anchorEl","user","name","email","avatar","componentDidMount","data","onAllDoctorSelect","selectAll","getAllDoctor","getUnselectedAllDoctor","splice","onDoctorSend","concat","updateSearch","evt","target","value","onToggleDrawer","render","closable","visible","onClose","placeholder","onChange","indeterminate","checked","classID","open","info"],"sources":["C:/wamp64/www/web/aid/src/routes/lists/Doctors/index.js"],"sourcesContent":["import React, {PureComponent} from \"react\";\r\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\n\r\nimport doctors from \"./data/doctors\";\r\nimport folders from \"./data/folders\";\r\nimport filters from \"./data/filters\";\r\nimport labels from \"./data/labels\";\r\nimport options from \"./data/options\";\r\nimport DoctorList from \"components/lists/DoctorsList/DoctorList\";\r\nimport AddDoctor from \"components/lists/DoctorsList/AddDoctor/index\";\r\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\r\nimport DoctorDetail from \"components/lists/DoctorsList/DoctorDetail/index\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport CircularProgress from \"../../../components/CircularProgress/index\";\r\nimport Auxiliary from \"../../../util/Auxiliary\";\r\n\r\n\r\nclass Doctors extends PureComponent {\r\n\r\n  DoctorSideBar = () => {\r\n    return <div className=\"gx-module-side\">\r\n\r\n      <div className=\"gx-module-side-header\">\r\n        <div className=\"gx-module-logo\">\r\n          <i className=\"icon icon-chat gx-mr-4\"/>\r\n          <IntlMessages id=\"sidebar.doctor.doctors\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-module-side-content\">\r\n        <CustomScrollbars className=\"gx-module-side-scroll\">\r\n          <div className=\"gx-module-add-task\">\r\n            <Button type=\"primary\" className=\"gx-btn-block\"\r\n                    onClick={() => {\r\n                      this.setState({addDoctor: true})\r\n                    }}>\r\n              <i className=\"icon icon-add-circle gx-mr-2\"/> Add Doctor</Button>\r\n          </div>\r\n\r\n          <ul className=\"gx-module-nav\">\r\n            {this.getNavFolders()}\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"sidebar.doctor.doctors\"/>\r\n            </li>\r\n\r\n            {this.getNavFilters()}\r\n\r\n            <li className=\"gx-module-nav-label\">\r\n              <IntlMessages id=\"sidebar.doctor.doctors\"/>\r\n            </li>\r\n\r\n            {this.getNavLabels()}\r\n\r\n          </ul>\r\n        </CustomScrollbars>\r\n      </div>\r\n    </div>\r\n  };\r\n\r\n  onDeleteDoctor = () => {\r\n    const doctors = this.state.allDoctor.map(doctor =>\r\n      doctor.selected && (doctor.folder === this.state.selectedFolder) ?\r\n        {...doctor, folder: 4, selected: false,} : doctor\r\n    );\r\n    this.setState({\r\n      alertMessage: 'Doctor Deleted Successfully',\r\n      showMessage: true,\r\n      selectedDoctors: 0,\r\n      allDoctor: doctors,\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  getNavFolders = () => {\r\n    return folders.map((folder, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterDoctors = this.state.allDoctor.filter(doctor => doctor.folder === folder.id);\r\n        this.setState({\r\n          selectedFolder: folder.id,\r\n          noContentFoundMessage: 'No Doctor found in selected folder',\r\n          currentDoctor: null,\r\n          loader: true,\r\n          folderDoctors: filterDoctors\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className={`${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`}>\r\n          <i className={`icon icon-${folder.icon}`}/>\r\n          <span>{folder.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n\r\n\r\n  onFolderMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const doctors = this.state.allDoctor.map(doctor =>\r\n      doctor.selected && (doctor.folder === this.state.selectedFolder) ?\r\n        {...doctor, folder: id, selected: false,} : doctor\r\n    );\r\n    this.setState({\r\n      selectedDoctors: 0,\r\n      allDoctor: doctors,\r\n      noContentFoundMessage: 'No Doctor found in selected folder',\r\n      alertMessage: 'Doctor has been moved successfully',\r\n      showMessage: true,\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  onLabelMenuItemSelect = (e) => {\r\n    const id = +e.key;\r\n    const doctors = this.state.allDoctor.map(doctor => {\r\n        if (doctor.selected && (doctor.folder === this.state.selectedFolder)) {\r\n          if (doctor.labels.includes(id)) {\r\n            return {...doctor, labels: this.removeLabel(doctor, id)};\r\n          } else {\r\n            return {...doctor, labels: this.addLabel(doctor, id)};\r\n          }\r\n        } else {\r\n          return doctor;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      noContentFoundMessage: 'No Doctor found in selected label',\r\n      alertMessage: 'Label Updated Successfully',\r\n      showMessage: true,\r\n      allDoctor: doctors,\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n\r\n  handleRequestClose = () => {\r\n    this.setState({\r\n      addDoctor: false,\r\n      showMessage: false,\r\n    });\r\n  };\r\n  getNavFilters = () => {\r\n    return filters.map((filter, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterDoctors = this.state.allDoctor.filter(doctor => {\r\n          if (filter.id === 0 && doctor.starred && doctor.folder === this.state.selectedFolder) {\r\n            return doctor\r\n          } else if (filter.id === 1 && doctor.important && doctor.folder === this.state.selectedFolder) {\r\n            return doctor\r\n          }\r\n          return null;\r\n        });\r\n        this.setState({\r\n          noContentFoundMessage: 'No Doctor found in selected filter',\r\n          loader: true,\r\n          folderDoctors: filterDoctors\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-${filter.icon}`}/>\r\n          <span>{filter.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  onOptionMenuItemSelect = (e) => {\r\n    switch (e.key) {\r\n      case 'All':\r\n        this.handleRequestClose();\r\n        this.getallDoctor();\r\n        break;\r\n      case 'None':\r\n        this.handleRequestClose();\r\n        this.getUnselectedallDoctor();\r\n        break;\r\n      case 'Read':\r\n        this.handleRequestClose();\r\n        this.getReadDoctor();\r\n        break;\r\n      case 'Unread':\r\n        this.handleRequestClose();\r\n        this.getUnreadDoctor();\r\n        break;\r\n      case 'Starred':\r\n        this.handleRequestClose();\r\n        this.getStarredDoctor();\r\n        break;\r\n      case 'Unstarred':\r\n        this.handleRequestClose();\r\n        this.getUnStarredDoctor();\r\n        break;\r\n      case 'Important':\r\n        this.handleRequestClose();\r\n        this.getImportantDoctor();\r\n        break;\r\n      case 'Unimportant':\r\n        this.handleRequestClose();\r\n        this.getUnimportantDoctor();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  getallDoctor = () => {\r\n    let doctors = this.state.allDoctor.map((doctor) => doctor.folder === this.state.selectedFolder ? {\r\n      ...doctor,\r\n      selected: true\r\n    } : doctor);\r\n    this.setState({\r\n      selectedDoctors: doctors.length,\r\n      allDoctor: doctors,\r\n      optionName: 'All',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getUnselectedallDoctor = () => {\r\n    let doctors = this.state.allDoctor.map((doctor) => doctor.folder === this.state.selectedFolder ? {\r\n      ...doctor,\r\n      selected: false\r\n    } : doctor);\r\n    this.setState({\r\n      selectedDoctors: 0,\r\n      allDoctor: doctors,\r\n      optionName: 'None',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n  };\r\n  getReadDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (doctor.read) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'Read',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getUnreadDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (!doctor.read) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'Unread',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getStarredDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (doctor.starred) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'Starred',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getUnStarredDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (!doctor.starred) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'UnStarred',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getImportantDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (doctor.important) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'Important',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getUnimportantDoctor = () => {\r\n    let selectedDoctor = 0;\r\n    let doctors = this.state.allDoctor.filter(doctor => doctor.folder === this.state.selectedFolder && doctor.folder === this.state.selectedFolder);\r\n    doctors = doctors.map((doctor) => {\r\n      if (!doctor.important) {\r\n        selectedDoctor++;\r\n        return {...doctor, selected: true};\r\n      }\r\n      return {...doctor, selected: false}\r\n    });\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      optionName: 'Unimportant',\r\n      noContentFoundMessage: 'No Doctor found in selected Label',\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === this.state.selectedFolder)\r\n    });\r\n    return doctors;\r\n  };\r\n  getNavLabels = () => {\r\n    return labels.map((label, index) =>\r\n      <li key={index} onClick={() => {\r\n        const filterDoctors = this.state.allDoctor.filter(doctor => doctor.labels.includes(label.id) && doctor.folder === this.state.selectedFolder);\r\n        this.setState({\r\n          loader: true,\r\n          noContentFoundMessage: 'No Doctor found in selected label',\r\n          folderDoctors: filterDoctors\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({loader: false});\r\n        }, 1500);\r\n      }\r\n      }>\r\n        <span className=\"gx-link\">\r\n          <i className={`icon icon-tag gx-text-${label.color}`}/>\r\n          <span>{label.title}</span>\r\n        </span>\r\n      </li>\r\n    )\r\n  };\r\n  searchDoctor = (searchText) => {\r\n    if (searchText === '') {\r\n      this.setState({folderDoctors: this.state.allDoctor.filter((doctor) => !doctor.deleted)});\r\n    } else {\r\n      const searchDoctors = this.state.allDoctor.filter((doctor) =>\r\n        !doctor.deleted && doctor.practice_number.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\r\n      this.setState({\r\n        folderDoctors: searchDoctors\r\n      });\r\n    }\r\n  };\r\n  displayDoctor = (currentDoctor, folderDoctors, noContentFoundMessage) => {\r\n    return (<div className=\"gx-module-box-column\">\r\n      {currentDoctor === null ?\r\n        folderDoctors.length === 0 ?\r\n          <div className=\"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\">\r\n            {noContentFoundMessage}\r\n          </div>\r\n          :\r\n          <DoctorList doctors={folderDoctors} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onDoctorSelect={this.onDoctorSelect.bind(this)}\r\n                    onDoctorChecked={this.onDoctorChecked.bind(this)}/>\r\n        :\r\n        <DoctorDetail doctor={currentDoctor} onStartSelect={this.onStartSelect.bind(this)}\r\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\r\n    </div>)\r\n  };\r\n  getDoctorActions = () => {\r\n    return <div className=\"gx-flex-row gx-align-items-center\">\r\n\r\n      <Dropdown overlay={this.folderMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-folder gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n        <i className=\"icon icon-tag gx-icon-btn\"/>\r\n      </Dropdown>\r\n\r\n      <span onClick={this.onDeleteDoctor.bind(this)}>\r\n        <i className=\"icon icon-trash gx-icon-btn\"/></span>\r\n\r\n    </div>\r\n  };\r\n\r\n  optionMenu = () => (\r\n    <Menu id=\"option-menu\"\r\n          onClick={this.onOptionMenuItemSelect.bind(this)}>\r\n      {options.map(option =>\r\n        <Menu.Item key={option.title}>\r\n          {option.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  folderMenu = () => (\r\n    <Menu id=\"folder-menu\"\r\n          onClick={this.onFolderMenuItemSelect.bind(this)}>\r\n      {folders.map(folder =>\r\n        <Menu.Item key={folder.id}>\r\n          {folder.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>);\r\n\r\n  labelMenu = () => (\r\n    <Menu id=\"label-menu\"\r\n          onClick={this.onLabelMenuItemSelect.bind(this)}>\r\n      {labels.map(label =>\r\n        <Menu.Item key={label.id}>\r\n          {label.title}\r\n        </Menu.Item>,\r\n      )}\r\n    </Menu>\r\n  );\r\n\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchDoctor: '',\r\n      noContentFoundMessage: 'No Doctor found in selected folder',\r\n      alertMessage: '',\r\n      showMessage: false,\r\n      drawerState: false,\r\n      optionName: 'None',\r\n      anchorEl: null,\r\n      allDoctor: doctors,\r\n      loader: true,\r\n      currentDoctor: null,\r\n      user: {\r\n        name: 'Robert Johnson',\r\n        email: 'robert@example.com',\r\n        avatar: \"https://via.placeholder.com/150\"\r\n      },\r\n      selectedDoctors: 0,\r\n      selectedFolder: 0,\r\n      addDoctor: false,\r\n      folderDoctors: doctors.filter(doctor => doctor.folder === 0)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n\r\n  onDoctorChecked(data) {\r\n    data.selected = !data.selected;\r\n    let selectedDoctor = 0;\r\n    const doctors = this.state.folderDoctors.map(doctor => {\r\n        if (doctor.selected) {\r\n          selectedDoctor++;\r\n        }\r\n        if (doctor.id === data.id) {\r\n          if (doctor.selected) {\r\n            selectedDoctor++;\r\n          }\r\n          return data;\r\n        } else {\r\n          return doctor;\r\n        }\r\n      }\r\n    );\r\n    this.setState({\r\n      selectedDoctors: selectedDoctor,\r\n      folderDoctors: doctors\r\n    });\r\n  }\r\n\r\n  onAllDoctorSelect() {\r\n    const selectAll = this.state.selectedDoctors <= this.state.folderDoctors.length;\r\n    if (selectAll) {\r\n      this.getAllDoctor();\r\n    } else {\r\n      this.getUnselectedAllDoctor();\r\n    }\r\n  }\r\n\r\n  removeLabel(doctor, label) {\r\n    doctor.labels.splice(doctor.labels.indexOf(label), 1);\r\n    if (this.state.currentDoctor !== null && doctor.id === this.state.currentDoctor.id) {\r\n      this.setState({\r\n        currentDoctor: {...doctor, labels: doctor.labels}\r\n      })\r\n    }\r\n    return doctor.labels;\r\n  }\r\n\r\n  onStartSelect(data) {\r\n    data.starred = !data.starred;\r\n    this.setState({\r\n      alertMessage: data.starred ? 'Doctor Mark as Active' : 'Doctor Remove as Active',\r\n      showMessage: true,\r\n      folderDoctors: this.state.folderDoctors.map(doctor =>\r\n        doctor.id === data.id ?\r\n          data : doctor\r\n      )\r\n    });\r\n  }\r\n\r\n  onImportantSelect(data) {\r\n    data.important = !data.important;\r\n    this.setState({\r\n      alertMessage: data.important ? 'Doctor Mark as Important' : 'Doctor Remove as Important',\r\n      showMessage: true,\r\n      folderDoctors: this.state.folderDoctors.map(doctor =>\r\n        doctor.id === data.id ?\r\n          data : doctor\r\n      )\r\n    });\r\n  }\r\n\r\n  onDoctorSend(data) {\r\n    this.setState(\r\n      {\r\n        alertMessage: 'Doctor Sent Successfully',\r\n        showMessage: true,\r\n        folderDoctors: this.state.allDoctor.concat(data),\r\n        allDoctor: this.state.allDoctor.concat(data)\r\n      }\r\n    );\r\n  }\r\n\r\n  onDoctorSelect(doctor) {\r\n    this.setState({\r\n      loader: true,\r\n      currentDoctor: doctor,\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({loader: false});\r\n    }, 1500);\r\n  }\r\n\r\n  addLabel(doctor, label) {\r\n    if (this.state.currentDoctor !== null && doctor.id === this.state.currentDoctor.id) {\r\n      this.setState({\r\n        currentDoctor: {...doctor, labels: doctor.labels.concat(label)}\r\n      })\r\n    }\r\n    return doctor.labels.concat(label)\r\n  }\r\n\r\n  updateSearch(evt) {\r\n    this.setState({\r\n      searchDoctor: evt.target.value,\r\n    });\r\n    this.searchDoctor(evt.target.value)\r\n  }\r\n\r\n  onToggleDrawer() {\r\n    this.setState({\r\n      drawerState: !this.state.drawerState\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {selectedDoctors, loader, currentDoctor, drawerState, folderDoctors, addDoctor, user, alertMessage, showMessage, noContentFoundMessage} = this.state;\r\n    return (\r\n\r\n      <div className=\"gx-main-content\">\r\n        <div className=\"gx-app-module\">\r\n\r\n          <div className=\"gx-d-block gx-d-lg-none\">\r\n            <Drawer\r\n              placement=\"left\"\r\n              closable={false}\r\n              visible={drawerState}\r\n              onClose={this.onToggleDrawer.bind(this)}>\r\n              {this.DoctorSideBar()}\r\n            </Drawer>\r\n\r\n          </div>\r\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\r\n            {this.DoctorSideBar()}\r\n          </div>\r\n\r\n          <div className=\"gx-module-box\">\r\n            <div className=\"gx-module-box-header\">\r\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\r\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\r\n                     onClick={this.onToggleDrawer.bind(this)}/>\r\n              </span>\r\n              <AppModuleHeader placeholder=\"Search Doctors\" user={this.state.user}\r\n                               onChange={this.updateSearch.bind(this)}\r\n                               value={this.state.searchDoctor}/>\r\n\r\n            </div>\r\n\r\n            <div className=\"gx-module-box-content\">\r\n              <div className=\"gx-module-box-topbar\">\r\n                {this.state.currentDoctor === null ?\r\n                  <div className=\"gx-flex-row gx-align-items-center\">\r\n                    {this.state.folderDoctors.length > 0 ?\r\n                      <Auxiliary>\r\n                        <Checkbox color=\"primary\" className=\"gx-icon-btn\"\r\n                                  indeterminate={selectedDoctors > 0 && selectedDoctors < folderDoctors.length}\r\n                                  checked={selectedDoctors > 0}\r\n                                  onChange={this.onAllDoctorSelect.bind(this)}\r\n                                  value=\"SelectDoctor\"/>\r\n\r\n                        <Dropdown overlay={this.optionMenu()} placement=\"bottomRight\" trigger={['click']}>\r\n                          <div>\r\n                            <span className=\"gx-px-2\"> {this.state.optionName}</span>\r\n                            <i className=\"icon icon-charvlet-down\"/></div>\r\n                        </Dropdown>\r\n                      </Auxiliary>\r\n                      : null}\r\n                  </div>\r\n                  :\r\n                  <i className=\"icon icon-arrow-left gx-icon-btn\" onClick={() => {\r\n                    this.setState({currentDoctor: null})\r\n                  }}/>\r\n                }\r\n\r\n                <div classID=\"toolbar-separator\"/>\r\n\r\n                {(selectedDoctors > 0) && this.getDoctorActions()}\r\n\r\n              </div>\r\n\r\n              {loader ?\r\n                <div className=\"gx-loader-view\">\r\n                  <CircularProgress/>\r\n                </div>\r\n                : this.displayDoctor(currentDoctor, folderDoctors, noContentFoundMessage)}\r\n\r\n              <AddDoctor open={addDoctor} user={user}\r\n                           onClose={this.handleRequestClose.bind(this)}\r\n                           onDoctorSend={this.onDoctorSend.bind(this)}/>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Doctors;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,aAAa,QAAO,OAAO;AAC1C,SAAQC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,QAAO,MAAM;AACtE,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,UAAU,MAAM,yCAAyC;AAChE,OAAOC,SAAS,MAAM,8CAA8C;AACpE,OAAOC,eAAe,MAAM,kCAAkC;AAC9D,OAAOC,YAAY,MAAM,iDAAiD;AAC1E,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,gBAAgB,MAAM,4CAA4C;AACzE,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,MAAMC,OAAO,SAAStB,aAAa,CAAC;EAkalCuB,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KAjaVC,aAAa,GAAG,MAAM;MACpB,oBAAOH,OAAA;QAAKI,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAEpCL,OAAA;UAAKI,SAAS,EAAC,uBAAuB;UAAAC,QAAA,eACpCL,OAAA;YAAKI,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7BL,OAAA;cAAGI,SAAS,EAAC;YAAwB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC,eACvCT,OAAA,CAACJ,YAAY;cAACc,EAAE,EAAC;YAAwB;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENT,OAAA;UAAKI,SAAS,EAAC,wBAAwB;UAAAC,QAAA,eACrCL,OAAA,CAACd,gBAAgB;YAACkB,SAAS,EAAC,uBAAuB;YAAAC,QAAA,gBACjDL,OAAA;cAAKI,SAAS,EAAC,oBAAoB;cAAAC,QAAA,eACjCL,OAAA,CAACpB,MAAM;gBAAC+B,IAAI,EAAC,SAAS;gBAACP,SAAS,EAAC,cAAc;gBACvCQ,OAAO,EAAEA,CAAA,KAAM;kBACb,IAAI,CAACC,QAAQ,CAAC;oBAACC,SAAS,EAAE;kBAAI,CAAC,CAAC;gBAClC,CAAE;gBAAAT,QAAA,gBACRL,OAAA;kBAAGI,SAAS,EAAC;gBAA8B;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAC,CAAC,eAAW;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE,CAAC,eAENT,OAAA;cAAII,SAAS,EAAC,eAAe;cAAAC,QAAA,GAC1B,IAAI,CAACU,aAAa,CAAC,CAAC,eAErBf,OAAA;gBAAII,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,eACjCL,OAAA,CAACJ,YAAY;kBAACc,EAAE,EAAC;gBAAwB;kBAAAJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CAAC,EAEJ,IAAI,CAACO,aAAa,CAAC,CAAC,eAErBhB,OAAA;gBAAII,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,eACjCL,OAAA,CAACJ,YAAY;kBAACc,EAAE,EAAC;gBAAwB;kBAAAJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzC,CAAC,EAEJ,IAAI,CAACQ,YAAY,CAAC,CAAC;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAElB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACW;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IACR,CAAC;IAAA,KAEDS,cAAc,GAAG,MAAM;MACrB,MAAM/B,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,MAAM,IAC7CA,MAAM,CAACC,QAAQ,IAAKD,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAe,GAC9D;QAAC,GAAGH,MAAM;QAAEE,MAAM,EAAE,CAAC;QAAED,QAAQ,EAAE;MAAM,CAAC,GAAGD,MAC/C,CAAC;MACD,IAAI,CAACT,QAAQ,CAAC;QACZa,YAAY,EAAE,6BAA6B;QAC3CC,WAAW,EAAE,IAAI;QACjBC,eAAe,EAAE,CAAC;QAClBR,SAAS,EAAEjC,OAAO;QAClB0C,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDV,aAAa,GAAG,MAAM;MACpB,OAAO3B,OAAO,CAACiC,GAAG,CAAC,CAACG,MAAM,EAAEO,KAAK,kBAC/B/B,OAAA;QAAgBY,OAAO,EAAEA,CAAA,KAAM;UAC7B,MAAMoB,aAAa,GAAG,IAAI,CAACb,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAKA,MAAM,CAACd,EAAE,CAAC;UACxF,IAAI,CAACG,QAAQ,CAAC;YACZY,cAAc,EAAED,MAAM,CAACd,EAAE;YACzBuB,qBAAqB,EAAE,oCAAoC;YAC3DC,aAAa,EAAE,IAAI;YACnBC,MAAM,EAAE,IAAI;YACZN,aAAa,EAAEG;UACjB,CAAC,CAAC;UACFI,UAAU,CAAC,MAAM;YACf,IAAI,CAACvB,QAAQ,CAAC;cAACsB,MAAM,EAAE;YAAK,CAAC,CAAC;UAChC,CAAC,EAAE,IAAI,CAAC;QACV,CACC;QAAA9B,QAAA,eACCL,OAAA;UAAMI,SAAS,EAAE,GAAG,IAAI,CAACe,KAAK,CAACM,cAAc,KAAKD,MAAM,CAACd,EAAE,GAAG,gBAAgB,GAAG,SAAS,EAAG;UAAAL,QAAA,gBAC3FL,OAAA;YAAGI,SAAS,EAAE,aAAaoB,MAAM,CAACa,IAAI;UAAG;YAAA/B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAC3CT,OAAA;YAAAK,QAAA,EAAOmB,MAAM,CAACc;UAAK;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB;MAAC,GAjBAsB,KAAK;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBV,CACN,CAAC;IACH,CAAC;IAAA,KAGD8B,sBAAsB,GAAIC,CAAC,IAAK;MAC9B,MAAM9B,EAAE,GAAG,CAAC8B,CAAC,CAACC,GAAG;MACjB,MAAMtD,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,MAAM,IAC7CA,MAAM,CAACC,QAAQ,IAAKD,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAe,GAC9D;QAAC,GAAGH,MAAM;QAAEE,MAAM,EAAEd,EAAE;QAAEa,QAAQ,EAAE;MAAM,CAAC,GAAGD,MAChD,CAAC;MACD,IAAI,CAACT,QAAQ,CAAC;QACZe,eAAe,EAAE,CAAC;QAClBR,SAAS,EAAEjC,OAAO;QAClB8C,qBAAqB,EAAE,oCAAoC;QAC3DP,YAAY,EAAE,oCAAoC;QAClDC,WAAW,EAAE,IAAI;QACjBE,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDiB,qBAAqB,GAAIF,CAAC,IAAK;MAC7B,MAAM9B,EAAE,GAAG,CAAC8B,CAAC,CAACC,GAAG;MACjB,MAAMtD,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,MAAM,IAAI;QAC/C,IAAIA,MAAM,CAACC,QAAQ,IAAKD,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAe,EAAE;UACpE,IAAIH,MAAM,CAAChC,MAAM,CAACqD,QAAQ,CAACjC,EAAE,CAAC,EAAE;YAC9B,OAAO;cAAC,GAAGY,MAAM;cAAEhC,MAAM,EAAE,IAAI,CAACsD,WAAW,CAACtB,MAAM,EAAEZ,EAAE;YAAC,CAAC;UAC1D,CAAC,MAAM;YACL,OAAO;cAAC,GAAGY,MAAM;cAAEhC,MAAM,EAAE,IAAI,CAACuD,QAAQ,CAACvB,MAAM,EAAEZ,EAAE;YAAC,CAAC;UACvD;QACF,CAAC,MAAM;UACL,OAAOY,MAAM;QACf;MACF,CACF,CAAC;MACD,IAAI,CAACT,QAAQ,CAAC;QACZoB,qBAAqB,EAAE,mCAAmC;QAC1DP,YAAY,EAAE,4BAA4B;QAC1CC,WAAW,EAAE,IAAI;QACjBP,SAAS,EAAEjC,OAAO;QAClB0C,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDqB,kBAAkB,GAAG,MAAM;MACzB,IAAI,CAACjC,QAAQ,CAAC;QACZC,SAAS,EAAE,KAAK;QAChBa,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC;IAAA,KACDX,aAAa,GAAG,MAAM;MACpB,OAAO3B,OAAO,CAACgC,GAAG,CAAC,CAACS,MAAM,EAAEC,KAAK,kBAC/B/B,OAAA;QAAgBY,OAAO,EAAEA,CAAA,KAAM;UAC7B,MAAMoB,aAAa,GAAG,IAAI,CAACb,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAI;YAC1D,IAAIQ,MAAM,CAACpB,EAAE,KAAK,CAAC,IAAIY,MAAM,CAACyB,OAAO,IAAIzB,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,EAAE;cACpF,OAAOH,MAAM;YACf,CAAC,MAAM,IAAIQ,MAAM,CAACpB,EAAE,KAAK,CAAC,IAAIY,MAAM,CAAC0B,SAAS,IAAI1B,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,EAAE;cAC7F,OAAOH,MAAM;YACf;YACA,OAAO,IAAI;UACb,CAAC,CAAC;UACF,IAAI,CAACT,QAAQ,CAAC;YACZoB,qBAAqB,EAAE,oCAAoC;YAC3DE,MAAM,EAAE,IAAI;YACZN,aAAa,EAAEG;UACjB,CAAC,CAAC;UACFI,UAAU,CAAC,MAAM;YACf,IAAI,CAACvB,QAAQ,CAAC;cAACsB,MAAM,EAAE;YAAK,CAAC,CAAC;UAChC,CAAC,EAAE,IAAI,CAAC;QACV,CACC;QAAA9B,QAAA,eACCL,OAAA;UAAMI,SAAS,EAAC,SAAS;UAAAC,QAAA,gBACvBL,OAAA;YAAGI,SAAS,EAAE,aAAa0B,MAAM,CAACO,IAAI;UAAG;YAAA/B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAC3CT,OAAA;YAAAK,QAAA,EAAOyB,MAAM,CAACQ;UAAK;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB;MAAC,GAtBAsB,KAAK;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAuBV,CACN,CAAC;IACH,CAAC;IAAA,KACDwC,sBAAsB,GAAIT,CAAC,IAAK;MAC9B,QAAQA,CAAC,CAACC,GAAG;QACX,KAAK,KAAK;UACR,IAAI,CAACK,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACI,YAAY,CAAC,CAAC;UACnB;QACF,KAAK,MAAM;UACT,IAAI,CAACJ,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACK,sBAAsB,CAAC,CAAC;UAC7B;QACF,KAAK,MAAM;UACT,IAAI,CAACL,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACM,aAAa,CAAC,CAAC;UACpB;QACF,KAAK,QAAQ;UACX,IAAI,CAACN,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACO,eAAe,CAAC,CAAC;UACtB;QACF,KAAK,SAAS;UACZ,IAAI,CAACP,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACQ,gBAAgB,CAAC,CAAC;UACvB;QACF,KAAK,WAAW;UACd,IAAI,CAACR,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACS,kBAAkB,CAAC,CAAC;UACzB;QACF,KAAK,WAAW;UACd,IAAI,CAACT,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACU,kBAAkB,CAAC,CAAC;UACzB;QACF,KAAK,aAAa;UAChB,IAAI,CAACV,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACW,oBAAoB,CAAC,CAAC;UAC3B;QACF;UACE;MACJ;IACF,CAAC;IAAA,KAEDP,YAAY,GAAG,MAAM;MACnB,IAAI/D,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,GAAG;QAC/F,GAAGH,MAAM;QACTC,QAAQ,EAAE;MACZ,CAAC,GAAGD,MAAM,CAAC;MACX,IAAI,CAACT,QAAQ,CAAC;QACZe,eAAe,EAAEzC,OAAO,CAACuE,MAAM;QAC/BtC,SAAS,EAAEjC,OAAO;QAClBwE,UAAU,EAAE,KAAK;QACjB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;IACJ,CAAC;IAAA,KACD0B,sBAAsB,GAAG,MAAM;MAC7B,IAAIhE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,GAAG;QAC/F,GAAGH,MAAM;QACTC,QAAQ,EAAE;MACZ,CAAC,GAAGD,MAAM,CAAC;MACX,IAAI,CAACT,QAAQ,CAAC;QACZe,eAAe,EAAE,CAAC;QAClBR,SAAS,EAAEjC,OAAO;QAClBwE,UAAU,EAAE,MAAM;QAClB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;IACJ,CAAC;IAAA,KACD2B,aAAa,GAAG,MAAM;MACpB,IAAIQ,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAChGtC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAIA,MAAM,CAACuC,IAAI,EAAE;UACfD,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,MAAM;QAClB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACDkE,eAAe,GAAG,MAAM;MACtB,IAAIO,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAChGtC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAI,CAACA,MAAM,CAACuC,IAAI,EAAE;UAChBD,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,QAAQ;QACpB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACDmE,gBAAgB,GAAG,MAAM;MACvB,IAAIM,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAChGtC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAIA,MAAM,CAACyB,OAAO,EAAE;UAClBa,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,SAAS;QACrB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACDoE,kBAAkB,GAAG,MAAM;MACzB,IAAIK,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,IAAIH,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAC/ItC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAI,CAACA,MAAM,CAACyB,OAAO,EAAE;UACnBa,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,WAAW;QACvB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACDqE,kBAAkB,GAAG,MAAM;MACzB,IAAII,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,IAAIH,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAC/ItC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAIA,MAAM,CAAC0B,SAAS,EAAE;UACpBY,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,WAAW;QACvB9B,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACDsE,oBAAoB,GAAG,MAAM;MAC3B,IAAIG,cAAc,GAAG,CAAC;MACtB,IAAIzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,IAAIH,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;MAC/ItC,OAAO,GAAGA,OAAO,CAACkC,GAAG,CAAEC,MAAM,IAAK;QAChC,IAAI,CAACA,MAAM,CAAC0B,SAAS,EAAE;UACrBY,cAAc,EAAE;UAChB,OAAO;YAAC,GAAGtC,MAAM;YAAEC,QAAQ,EAAE;UAAI,CAAC;QACpC;QACA,OAAO;UAAC,GAAGD,MAAM;UAAEC,QAAQ,EAAE;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,IAAI,CAACV,QAAQ,CAAC;QACZe,eAAe,EAAEgC,cAAc;QAC/BD,UAAU,EAAE,aAAa;QACzB1B,qBAAqB,EAAE,mCAAmC;QAC1DJ,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc;MACrF,CAAC,CAAC;MACF,OAAOtC,OAAO;IAChB,CAAC;IAAA,KACD8B,YAAY,GAAG,MAAM;MACnB,OAAO3B,MAAM,CAAC+B,GAAG,CAAC,CAACyC,KAAK,EAAE/B,KAAK,kBAC7B/B,OAAA;QAAgBY,OAAO,EAAEA,CAAA,KAAM;UAC7B,MAAMoB,aAAa,GAAG,IAAI,CAACb,KAAK,CAACC,SAAS,CAACU,MAAM,CAACR,MAAM,IAAIA,MAAM,CAAChC,MAAM,CAACqD,QAAQ,CAACmB,KAAK,CAACpD,EAAE,CAAC,IAAIY,MAAM,CAACE,MAAM,KAAK,IAAI,CAACL,KAAK,CAACM,cAAc,CAAC;UAC5I,IAAI,CAACZ,QAAQ,CAAC;YACZsB,MAAM,EAAE,IAAI;YACZF,qBAAqB,EAAE,mCAAmC;YAC1DJ,aAAa,EAAEG;UACjB,CAAC,CAAC;UACFI,UAAU,CAAC,MAAM;YACf,IAAI,CAACvB,QAAQ,CAAC;cAACsB,MAAM,EAAE;YAAK,CAAC,CAAC;UAChC,CAAC,EAAE,IAAI,CAAC;QACV,CACC;QAAA9B,QAAA,eACCL,OAAA;UAAMI,SAAS,EAAC,SAAS;UAAAC,QAAA,gBACvBL,OAAA;YAAGI,SAAS,EAAE,yBAAyB0D,KAAK,CAACC,KAAK;UAAG;YAAAzD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eACvDT,OAAA;YAAAK,QAAA,EAAOyD,KAAK,CAACxB;UAAK;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB;MAAC,GAfAsB,KAAK;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBV,CACN,CAAC;IACH,CAAC;IAAA,KACDuD,YAAY,GAAIC,UAAU,IAAK;MAC7B,IAAIA,UAAU,KAAK,EAAE,EAAE;QACrB,IAAI,CAACpD,QAAQ,CAAC;UAACgB,aAAa,EAAE,IAAI,CAACV,KAAK,CAACC,SAAS,CAACU,MAAM,CAAER,MAAM,IAAK,CAACA,MAAM,CAAC4C,OAAO;QAAC,CAAC,CAAC;MAC1F,CAAC,MAAM;QACL,MAAMC,aAAa,GAAG,IAAI,CAAChD,KAAK,CAACC,SAAS,CAACU,MAAM,CAAER,MAAM,IACvD,CAACA,MAAM,CAAC4C,OAAO,IAAI5C,MAAM,CAAC8C,eAAe,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAACL,UAAU,CAACI,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACjG,IAAI,CAACxD,QAAQ,CAAC;UACZgB,aAAa,EAAEsC;QACjB,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,KACDI,aAAa,GAAG,CAACrC,aAAa,EAAEL,aAAa,EAAEI,qBAAqB,KAAK;MACvE,oBAAQjC,OAAA;QAAKI,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAC1C6B,aAAa,KAAK,IAAI,GACrBL,aAAa,CAAC6B,MAAM,KAAK,CAAC,gBACxB1D,OAAA;UAAKI,SAAS,EAAC,6FAA6F;UAAAC,QAAA,EACzG4B;QAAqB;UAAA3B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC,gBAENT,OAAA,CAACR,UAAU;UAACL,OAAO,EAAE0C,aAAc;UAAC2C,aAAa,EAAE,IAAI,CAACA,aAAa,CAACC,IAAI,CAAC,IAAI,CAAE;UACvEC,cAAc,EAAE,IAAI,CAACA,cAAc,CAACD,IAAI,CAAC,IAAI,CAAE;UAC/CE,eAAe,EAAE,IAAI,CAACA,eAAe,CAACF,IAAI,CAAC,IAAI;QAAE;UAAAnE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,gBAE/DT,OAAA,CAACL,YAAY;UAAC2B,MAAM,EAAEY,aAAc;UAACsC,aAAa,EAAE,IAAI,CAACA,aAAa,CAACC,IAAI,CAAC,IAAI,CAAE;UACtEG,iBAAiB,EAAE,IAAI,CAACA,iBAAiB,CAACH,IAAI,CAAC,IAAI;QAAE;UAAAnE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC;IACR,CAAC;IAAA,KACDoE,gBAAgB,GAAG,MAAM;MACvB,oBAAO7E,OAAA;QAAKI,SAAS,EAAC,mCAAmC;QAAAC,QAAA,gBAEvDL,OAAA,CAACjB,QAAQ;UAAC+F,OAAO,EAAE,IAAI,CAACC,UAAU,CAAC,CAAE;UAACC,SAAS,EAAC,aAAa;UAACC,OAAO,EAAE,CAAC,OAAO,CAAE;UAAA5E,QAAA,eAC/EL,OAAA;YAAGI,SAAS,EAAC;UAA8B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC,eAEXT,OAAA,CAACjB,QAAQ;UAAC+F,OAAO,EAAE,IAAI,CAACI,SAAS,CAAC,CAAE;UAACF,SAAS,EAAC,aAAa;UAACC,OAAO,EAAE,CAAC,OAAO,CAAE;UAAA5E,QAAA,eAC9EL,OAAA;YAAGI,SAAS,EAAC;UAA2B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eAEXT,OAAA;UAAMY,OAAO,EAAE,IAAI,CAACM,cAAc,CAACuD,IAAI,CAAC,IAAI,CAAE;UAAApE,QAAA,eAC5CL,OAAA;YAAGI,SAAS,EAAC;UAA6B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAElD,CAAC;IACR,CAAC;IAAA,KAED0E,UAAU,GAAG,mBACXnF,OAAA,CAAChB,IAAI;MAAC0B,EAAE,EAAC,aAAa;MAChBE,OAAO,EAAE,IAAI,CAACqC,sBAAsB,CAACwB,IAAI,CAAC,IAAI,CAAE;MAAApE,QAAA,EACnDd,OAAO,CAAC8B,GAAG,CAAC+D,MAAM,iBACjBpF,OAAA,CAAChB,IAAI,CAACqG,IAAI;QAAAhF,QAAA,EACP+E,MAAM,CAAC9C;MAAK,GADC8C,MAAM,CAAC9C,KAAK;QAAAhC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAE;IAAA,KAEVsE,UAAU,GAAG,mBACX/E,OAAA,CAAChB,IAAI;MAAC0B,EAAE,EAAC,aAAa;MAChBE,OAAO,EAAE,IAAI,CAAC2B,sBAAsB,CAACkC,IAAI,CAAC,IAAI,CAAE;MAAApE,QAAA,EACnDjB,OAAO,CAACiC,GAAG,CAACG,MAAM,iBACjBxB,OAAA,CAAChB,IAAI,CAACqG,IAAI;QAAAhF,QAAA,EACPmB,MAAM,CAACc;MAAK,GADCd,MAAM,CAACd,EAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAE;IAAA,KAEVyE,SAAS,GAAG,mBACVlF,OAAA,CAAChB,IAAI;MAAC0B,EAAE,EAAC,YAAY;MACfE,OAAO,EAAE,IAAI,CAAC8B,qBAAqB,CAAC+B,IAAI,CAAC,IAAI,CAAE;MAAApE,QAAA,EAClDf,MAAM,CAAC+B,GAAG,CAACyC,KAAK,iBACf9D,OAAA,CAAChB,IAAI,CAACqG,IAAI;QAAAhF,QAAA,EACPyD,KAAK,CAACxB;MAAK,GADEwB,KAAK,CAACpD,EAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CACP;IAKC,IAAI,CAACU,KAAK,GAAG;MACX6C,YAAY,EAAE,EAAE;MAChB/B,qBAAqB,EAAE,oCAAoC;MAC3DP,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAE,KAAK;MAClB2D,WAAW,EAAE,KAAK;MAClB3B,UAAU,EAAE,MAAM;MAClB4B,QAAQ,EAAE,IAAI;MACdnE,SAAS,EAAEjC,OAAO;MAClBgD,MAAM,EAAE,IAAI;MACZD,aAAa,EAAE,IAAI;MACnBsD,IAAI,EAAE;QACJC,IAAI,EAAE,gBAAgB;QACtBC,KAAK,EAAE,oBAAoB;QAC3BC,MAAM,EAAE;MACV,CAAC;MACD/D,eAAe,EAAE,CAAC;MAClBH,cAAc,EAAE,CAAC;MACjBX,SAAS,EAAE,KAAK;MAChBe,aAAa,EAAE1C,OAAO,CAAC2C,MAAM,CAACR,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC;IAC7D,CAAC;EACH;EAEAoE,iBAAiBA,CAAA,EAAG;IAClBxD,UAAU,CAAC,MAAM;MACf,IAAI,CAACvB,QAAQ,CAAC;QAACsB,MAAM,EAAE;MAAK,CAAC,CAAC;IAChC,CAAC,EAAE,IAAI,CAAC;EACV;EAGAwC,eAAeA,CAACkB,IAAI,EAAE;IACpBA,IAAI,CAACtE,QAAQ,GAAG,CAACsE,IAAI,CAACtE,QAAQ;IAC9B,IAAIqC,cAAc,GAAG,CAAC;IACtB,MAAMzE,OAAO,GAAG,IAAI,CAACgC,KAAK,CAACU,aAAa,CAACR,GAAG,CAACC,MAAM,IAAI;MACnD,IAAIA,MAAM,CAACC,QAAQ,EAAE;QACnBqC,cAAc,EAAE;MAClB;MACA,IAAItC,MAAM,CAACZ,EAAE,KAAKmF,IAAI,CAACnF,EAAE,EAAE;QACzB,IAAIY,MAAM,CAACC,QAAQ,EAAE;UACnBqC,cAAc,EAAE;QAClB;QACA,OAAOiC,IAAI;MACb,CAAC,MAAM;QACL,OAAOvE,MAAM;MACf;IACF,CACF,CAAC;IACD,IAAI,CAACT,QAAQ,CAAC;MACZe,eAAe,EAAEgC,cAAc;MAC/B/B,aAAa,EAAE1C;IACjB,CAAC,CAAC;EACJ;EAEA2G,iBAAiBA,CAAA,EAAG;IAClB,MAAMC,SAAS,GAAG,IAAI,CAAC5E,KAAK,CAACS,eAAe,IAAI,IAAI,CAACT,KAAK,CAACU,aAAa,CAAC6B,MAAM;IAC/E,IAAIqC,SAAS,EAAE;MACb,IAAI,CAACC,YAAY,CAAC,CAAC;IACrB,CAAC,MAAM;MACL,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAC/B;EACF;EAEArD,WAAWA,CAACtB,MAAM,EAAEwC,KAAK,EAAE;IACzBxC,MAAM,CAAChC,MAAM,CAAC4G,MAAM,CAAC5E,MAAM,CAAChC,MAAM,CAACgF,OAAO,CAACR,KAAK,CAAC,EAAE,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC3C,KAAK,CAACe,aAAa,KAAK,IAAI,IAAIZ,MAAM,CAACZ,EAAE,KAAK,IAAI,CAACS,KAAK,CAACe,aAAa,CAACxB,EAAE,EAAE;MAClF,IAAI,CAACG,QAAQ,CAAC;QACZqB,aAAa,EAAE;UAAC,GAAGZ,MAAM;UAAEhC,MAAM,EAAEgC,MAAM,CAAChC;QAAM;MAClD,CAAC,CAAC;IACJ;IACA,OAAOgC,MAAM,CAAChC,MAAM;EACtB;EAEAkF,aAAaA,CAACqB,IAAI,EAAE;IAClBA,IAAI,CAAC9C,OAAO,GAAG,CAAC8C,IAAI,CAAC9C,OAAO;IAC5B,IAAI,CAAClC,QAAQ,CAAC;MACZa,YAAY,EAAEmE,IAAI,CAAC9C,OAAO,GAAG,uBAAuB,GAAG,yBAAyB;MAChFpB,WAAW,EAAE,IAAI;MACjBE,aAAa,EAAE,IAAI,CAACV,KAAK,CAACU,aAAa,CAACR,GAAG,CAACC,MAAM,IAChDA,MAAM,CAACZ,EAAE,KAAKmF,IAAI,CAACnF,EAAE,GACnBmF,IAAI,GAAGvE,MACX;IACF,CAAC,CAAC;EACJ;EAEAsD,iBAAiBA,CAACiB,IAAI,EAAE;IACtBA,IAAI,CAAC7C,SAAS,GAAG,CAAC6C,IAAI,CAAC7C,SAAS;IAChC,IAAI,CAACnC,QAAQ,CAAC;MACZa,YAAY,EAAEmE,IAAI,CAAC7C,SAAS,GAAG,0BAA0B,GAAG,4BAA4B;MACxFrB,WAAW,EAAE,IAAI;MACjBE,aAAa,EAAE,IAAI,CAACV,KAAK,CAACU,aAAa,CAACR,GAAG,CAACC,MAAM,IAChDA,MAAM,CAACZ,EAAE,KAAKmF,IAAI,CAACnF,EAAE,GACnBmF,IAAI,GAAGvE,MACX;IACF,CAAC,CAAC;EACJ;EAEA6E,YAAYA,CAACN,IAAI,EAAE;IACjB,IAAI,CAAChF,QAAQ,CACX;MACEa,YAAY,EAAE,0BAA0B;MACxCC,WAAW,EAAE,IAAI;MACjBE,aAAa,EAAE,IAAI,CAACV,KAAK,CAACC,SAAS,CAACgF,MAAM,CAACP,IAAI,CAAC;MAChDzE,SAAS,EAAE,IAAI,CAACD,KAAK,CAACC,SAAS,CAACgF,MAAM,CAACP,IAAI;IAC7C,CACF,CAAC;EACH;EAEAnB,cAAcA,CAACpD,MAAM,EAAE;IACrB,IAAI,CAACT,QAAQ,CAAC;MACZsB,MAAM,EAAE,IAAI;MACZD,aAAa,EAAEZ;IACjB,CAAC,CAAC;IACFc,UAAU,CAAC,MAAM;MACf,IAAI,CAACvB,QAAQ,CAAC;QAACsB,MAAM,EAAE;MAAK,CAAC,CAAC;IAChC,CAAC,EAAE,IAAI,CAAC;EACV;EAEAU,QAAQA,CAACvB,MAAM,EAAEwC,KAAK,EAAE;IACtB,IAAI,IAAI,CAAC3C,KAAK,CAACe,aAAa,KAAK,IAAI,IAAIZ,MAAM,CAACZ,EAAE,KAAK,IAAI,CAACS,KAAK,CAACe,aAAa,CAACxB,EAAE,EAAE;MAClF,IAAI,CAACG,QAAQ,CAAC;QACZqB,aAAa,EAAE;UAAC,GAAGZ,MAAM;UAAEhC,MAAM,EAAEgC,MAAM,CAAChC,MAAM,CAAC8G,MAAM,CAACtC,KAAK;QAAC;MAChE,CAAC,CAAC;IACJ;IACA,OAAOxC,MAAM,CAAChC,MAAM,CAAC8G,MAAM,CAACtC,KAAK,CAAC;EACpC;EAEAuC,YAAYA,CAACC,GAAG,EAAE;IAChB,IAAI,CAACzF,QAAQ,CAAC;MACZmD,YAAY,EAAEsC,GAAG,CAACC,MAAM,CAACC;IAC3B,CAAC,CAAC;IACF,IAAI,CAACxC,YAAY,CAACsC,GAAG,CAACC,MAAM,CAACC,KAAK,CAAC;EACrC;EAEAC,cAAcA,CAAA,EAAG;IACf,IAAI,CAAC5F,QAAQ,CAAC;MACZyE,WAAW,EAAE,CAAC,IAAI,CAACnE,KAAK,CAACmE;IAC3B,CAAC,CAAC;EACJ;EAEAoB,MAAMA,CAAA,EAAG;IACP,MAAM;MAAC9E,eAAe;MAAEO,MAAM;MAAED,aAAa;MAAEoD,WAAW;MAAEzD,aAAa;MAAEf,SAAS;MAAE0E,IAAI;MAAE9D,YAAY;MAAEC,WAAW;MAAEM;IAAqB,CAAC,GAAG,IAAI,CAACd,KAAK;IAC1J,oBAEEnB,OAAA;MAAKI,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BL,OAAA;QAAKI,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAE5BL,OAAA;UAAKI,SAAS,EAAC,yBAAyB;UAAAC,QAAA,eACtCL,OAAA,CAAClB,MAAM;YACLkG,SAAS,EAAC,MAAM;YAChB2B,QAAQ,EAAE,KAAM;YAChBC,OAAO,EAAEtB,WAAY;YACrBuB,OAAO,EAAE,IAAI,CAACJ,cAAc,CAAChC,IAAI,CAAC,IAAI,CAAE;YAAApE,QAAA,EACvC,IAAI,CAACF,aAAa,CAAC;UAAC;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEN,CAAC,eACNT,OAAA;UAAKI,SAAS,EAAC,0CAA0C;UAAAC,QAAA,EACtD,IAAI,CAACF,aAAa,CAAC;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC,eAENT,OAAA;UAAKI,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BL,OAAA;YAAKI,SAAS,EAAC,sBAAsB;YAAAC,QAAA,gBACnCL,OAAA;cAAMI,SAAS,EAAC,sCAAsC;cAAAC,QAAA,eAClDL,OAAA;gBAAGI,SAAS,EAAC,4BAA4B;gBAAC,cAAW,MAAM;gBACxDQ,OAAO,EAAE,IAAI,CAAC6F,cAAc,CAAChC,IAAI,CAAC,IAAI;cAAE;gBAAAnE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC,eACPT,OAAA,CAACN,eAAe;cAACoH,WAAW,EAAC,gBAAgB;cAACtB,IAAI,EAAE,IAAI,CAACrE,KAAK,CAACqE,IAAK;cACnDuB,QAAQ,EAAE,IAAI,CAACV,YAAY,CAAC5B,IAAI,CAAC,IAAI,CAAE;cACvC+B,KAAK,EAAE,IAAI,CAACrF,KAAK,CAAC6C;YAAa;cAAA1D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAE/C,CAAC,eAENT,OAAA;YAAKI,SAAS,EAAC,uBAAuB;YAAAC,QAAA,gBACpCL,OAAA;cAAKI,SAAS,EAAC,sBAAsB;cAAAC,QAAA,GAClC,IAAI,CAACc,KAAK,CAACe,aAAa,KAAK,IAAI,gBAChClC,OAAA;gBAAKI,SAAS,EAAC,mCAAmC;gBAAAC,QAAA,EAC/C,IAAI,CAACc,KAAK,CAACU,aAAa,CAAC6B,MAAM,GAAG,CAAC,gBAClC1D,OAAA,CAACF,SAAS;kBAAAO,QAAA,gBACRL,OAAA,CAACnB,QAAQ;oBAACkF,KAAK,EAAC,SAAS;oBAAC3D,SAAS,EAAC,aAAa;oBACvC4G,aAAa,EAAEpF,eAAe,GAAG,CAAC,IAAIA,eAAe,GAAGC,aAAa,CAAC6B,MAAO;oBAC7EuD,OAAO,EAAErF,eAAe,GAAG,CAAE;oBAC7BmF,QAAQ,EAAE,IAAI,CAACjB,iBAAiB,CAACrB,IAAI,CAAC,IAAI,CAAE;oBAC5C+B,KAAK,EAAC;kBAAc;oBAAAlG,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAC,CAAC,eAEhCT,OAAA,CAACjB,QAAQ;oBAAC+F,OAAO,EAAE,IAAI,CAACK,UAAU,CAAC,CAAE;oBAACH,SAAS,EAAC,aAAa;oBAACC,OAAO,EAAE,CAAC,OAAO,CAAE;oBAAA5E,QAAA,eAC/EL,OAAA;sBAAAK,QAAA,gBACEL,OAAA;wBAAMI,SAAS,EAAC,SAAS;wBAAAC,QAAA,GAAC,GAAC,EAAC,IAAI,CAACc,KAAK,CAACwC,UAAU;sBAAA;wBAAArD,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAO,CAAC,eACzDT,OAAA;wBAAGI,SAAS,EAAC;sBAAyB;wBAAAE,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAC,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACxC,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACF,CAAC,GACV;cAAI;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,gBAENT,OAAA;gBAAGI,SAAS,EAAC,kCAAkC;gBAACQ,OAAO,EAAEA,CAAA,KAAM;kBAC7D,IAAI,CAACC,QAAQ,CAAC;oBAACqB,aAAa,EAAE;kBAAI,CAAC,CAAC;gBACtC;cAAE;gBAAA5B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC,CAAC,eAGNT,OAAA;gBAAKkH,OAAO,EAAC;cAAmB;gBAAA5G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC,CAAC,EAEhCmB,eAAe,GAAG,CAAC,IAAK,IAAI,CAACiD,gBAAgB,CAAC,CAAC;YAAA;cAAAvE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAE9C,CAAC,EAEL0B,MAAM,gBACLnC,OAAA;cAAKI,SAAS,EAAC,gBAAgB;cAAAC,QAAA,eAC7BL,OAAA,CAACH,gBAAgB;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB,CAAC,GACJ,IAAI,CAAC8D,aAAa,CAACrC,aAAa,EAAEL,aAAa,EAAEI,qBAAqB,CAAC,eAE3EjC,OAAA,CAACP,SAAS;cAAC0H,IAAI,EAAErG,SAAU;cAAC0E,IAAI,EAAEA,IAAK;cAC1BqB,OAAO,EAAE,IAAI,CAAC/D,kBAAkB,CAAC2B,IAAI,CAAC,IAAI,CAAE;cAC5C0B,YAAY,EAAE,IAAI,CAACA,YAAY,CAAC1B,IAAI,CAAC,IAAI;YAAE;cAAAnE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEvD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EACLkB,WAAW,IAAI1C,OAAO,CAACmI,IAAI,eAACpH,OAAA;QAAMU,EAAE,EAAC,YAAY;QAAAL,QAAA,EAAEqB;MAAY;QAAApB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAACqC,kBAAkB,CAAC;IAAA;MAAAxC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClG,CAAC;EAEV;AACF;AAEA,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}