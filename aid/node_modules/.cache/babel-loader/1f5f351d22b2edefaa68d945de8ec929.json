{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _CheckOutlined = _interopRequireDefault(require(\"@ant-design/icons/CheckOutlined\"));\nvar _CopyOutlined = _interopRequireDefault(require(\"@ant-design/icons/CopyOutlined\"));\nvar _EditOutlined = _interopRequireDefault(require(\"@ant-design/icons/EditOutlined\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _copyToClipboard = _interopRequireDefault(require(\"copy-to-clipboard\"));\nvar _rcResizeObserver = _interopRequireDefault(require(\"rc-resize-observer\"));\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\nvar _useLayoutEffect = _interopRequireDefault(require(\"rc-util/lib/hooks/useLayoutEffect\"));\nvar _useMergedState3 = _interopRequireDefault(require(\"rc-util/lib/hooks/useMergedState\"));\nvar _omit = _interopRequireDefault(require(\"rc-util/lib/omit\"));\nvar _ref3 = require(\"rc-util/lib/ref\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _configProvider = require(\"../../config-provider\");\nvar _LocaleReceiver = require(\"../../locale-provider/LocaleReceiver\");\nvar _transButton = _interopRequireDefault(require(\"../../_util/transButton\"));\nvar _styleChecker = require(\"../../_util/styleChecker\");\nvar _tooltip = _interopRequireDefault(require(\"../../tooltip\"));\nvar _Editable = _interopRequireDefault(require(\"../Editable\"));\nvar _useMergedConfig7 = _interopRequireDefault(require(\"../hooks/useMergedConfig\"));\nvar _useUpdatedEffect = _interopRequireDefault(require(\"../hooks/useUpdatedEffect\"));\nvar _Typography = _interopRequireDefault(require(\"../Typography\"));\nvar _Ellipsis = _interopRequireDefault(require(\"./Ellipsis\"));\nvar _EllipsisTooltip = _interopRequireDefault(require(\"./EllipsisTooltip\"));\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nfunction wrapperDecorations(_ref, content) {\n  var mark = _ref.mark,\n    code = _ref.code,\n    underline = _ref.underline,\n    del = _ref[\"delete\"],\n    strong = _ref.strong,\n    keyboard = _ref.keyboard,\n    italic = _ref.italic;\n  var currentContent = content;\n  function wrap(needed, tag) {\n    if (!needed) return;\n    currentContent = /*#__PURE__*/React.createElement(tag, {}, currentContent);\n  }\n  wrap(strong, 'strong');\n  wrap(underline, 'u');\n  wrap(del, 'del');\n  wrap(code, 'code');\n  wrap(mark, 'mark');\n  wrap(keyboard, 'kbd');\n  wrap(italic, 'i');\n  return currentContent;\n}\nfunction getNode(dom, defaultNode, needDom) {\n  if (dom === true || dom === undefined) {\n    return defaultNode;\n  }\n  return dom || needDom && defaultNode;\n}\nfunction toList(val) {\n  if (val === false) {\n    return [false, false];\n  }\n  return Array.isArray(val) ? val : [val];\n}\nvar ELLIPSIS_STR = '...';\nvar Base = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _a, _b, _c;\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    style = props.style,\n    type = props.type,\n    disabled = props.disabled,\n    children = props.children,\n    ellipsis = props.ellipsis,\n    editable = props.editable,\n    copyable = props.copyable,\n    component = props.component,\n    title = props.title,\n    restProps = __rest(props, [\"prefixCls\", \"className\", \"style\", \"type\", \"disabled\", \"children\", \"ellipsis\", \"editable\", \"copyable\", \"component\", \"title\"]);\n  var _React$useContext = React.useContext(_configProvider.ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction;\n  var textLocale = (0, _LocaleReceiver.useLocaleReceiver)('Text')[0]; // Force TS get this\n  var typographyRef = React.useRef(null);\n  var editIconRef = React.useRef(null);\n  // ============================ MISC ============================\n  var prefixCls = getPrefixCls('typography', customizePrefixCls);\n  var textProps = (0, _omit[\"default\"])(restProps, ['mark', 'code', 'delete', 'underline', 'strong', 'keyboard', 'italic']);\n  // ========================== Editable ==========================\n  var _useMergedConfig = (0, _useMergedConfig7[\"default\"])(editable),\n    _useMergedConfig2 = (0, _slicedToArray2[\"default\"])(_useMergedConfig, 2),\n    enableEdit = _useMergedConfig2[0],\n    editConfig = _useMergedConfig2[1];\n  var _useMergedState = (0, _useMergedState3[\"default\"])(false, {\n      value: editConfig.editing\n    }),\n    _useMergedState2 = (0, _slicedToArray2[\"default\"])(_useMergedState, 2),\n    editing = _useMergedState2[0],\n    setEditing = _useMergedState2[1];\n  var _editConfig$triggerTy = editConfig.triggerType,\n    triggerType = _editConfig$triggerTy === void 0 ? ['icon'] : _editConfig$triggerTy;\n  var triggerEdit = function triggerEdit(edit) {\n    var _a;\n    if (edit) {\n      (_a = editConfig.onStart) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    }\n    setEditing(edit);\n  };\n  // Focus edit icon when back\n  (0, _useUpdatedEffect[\"default\"])(function () {\n    var _a;\n    if (!editing) {\n      (_a = editIconRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [editing]);\n  var onEditClick = function onEditClick(e) {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    triggerEdit(true);\n  };\n  var onEditChange = function onEditChange(value) {\n    var _a;\n    (_a = editConfig.onChange) === null || _a === void 0 ? void 0 : _a.call(editConfig, value);\n    triggerEdit(false);\n  };\n  var onEditCancel = function onEditCancel() {\n    var _a;\n    (_a = editConfig.onCancel) === null || _a === void 0 ? void 0 : _a.call(editConfig);\n    triggerEdit(false);\n  };\n  // ========================== Copyable ==========================\n  var _useMergedConfig3 = (0, _useMergedConfig7[\"default\"])(copyable),\n    _useMergedConfig4 = (0, _slicedToArray2[\"default\"])(_useMergedConfig3, 2),\n    enableCopy = _useMergedConfig4[0],\n    copyConfig = _useMergedConfig4[1];\n  var _React$useState = React.useState(false),\n    _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n    copied = _React$useState2[0],\n    setCopied = _React$useState2[1];\n  var copyIdRef = React.useRef();\n  var copyOptions = {};\n  if (copyConfig.format) {\n    copyOptions.format = copyConfig.format;\n  }\n  var cleanCopyId = function cleanCopyId() {\n    window.clearTimeout(copyIdRef.current);\n  };\n  var onCopyClick = function onCopyClick(e) {\n    var _a;\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    e === null || e === void 0 ? void 0 : e.stopPropagation();\n    (0, _copyToClipboard[\"default\"])(copyConfig.text || String(children) || '', copyOptions);\n    setCopied(true);\n    // Trigger tips update\n    cleanCopyId();\n    copyIdRef.current = window.setTimeout(function () {\n      setCopied(false);\n    }, 3000);\n    (_a = copyConfig.onCopy) === null || _a === void 0 ? void 0 : _a.call(copyConfig, e);\n  };\n  React.useEffect(function () {\n    return cleanCopyId;\n  }, []);\n  // ========================== Ellipsis ==========================\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = (0, _slicedToArray2[\"default\"])(_React$useState3, 2),\n    isLineClampSupport = _React$useState4[0],\n    setIsLineClampSupport = _React$useState4[1];\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = (0, _slicedToArray2[\"default\"])(_React$useState5, 2),\n    isTextOverflowSupport = _React$useState6[0],\n    setIsTextOverflowSupport = _React$useState6[1];\n  var _React$useState7 = React.useState(false),\n    _React$useState8 = (0, _slicedToArray2[\"default\"])(_React$useState7, 2),\n    expanded = _React$useState8[0],\n    setExpanded = _React$useState8[1];\n  var _React$useState9 = React.useState(false),\n    _React$useState10 = (0, _slicedToArray2[\"default\"])(_React$useState9, 2),\n    isJsEllipsis = _React$useState10[0],\n    setIsJsEllipsis = _React$useState10[1];\n  var _React$useState11 = React.useState(false),\n    _React$useState12 = (0, _slicedToArray2[\"default\"])(_React$useState11, 2),\n    isNativeEllipsis = _React$useState12[0],\n    setIsNativeEllipsis = _React$useState12[1];\n  var _React$useState13 = React.useState(true),\n    _React$useState14 = (0, _slicedToArray2[\"default\"])(_React$useState13, 2),\n    isNativeVisible = _React$useState14[0],\n    setIsNativeVisible = _React$useState14[1];\n  var _useMergedConfig5 = (0, _useMergedConfig7[\"default\"])(ellipsis, {\n      expandable: false\n    }),\n    _useMergedConfig6 = (0, _slicedToArray2[\"default\"])(_useMergedConfig5, 2),\n    enableEllipsis = _useMergedConfig6[0],\n    ellipsisConfig = _useMergedConfig6[1];\n  var mergedEnableEllipsis = enableEllipsis && !expanded;\n  // Shared prop to reduce bundle size\n  var _ellipsisConfig$rows = ellipsisConfig.rows,\n    rows = _ellipsisConfig$rows === void 0 ? 1 : _ellipsisConfig$rows;\n  var needMeasureEllipsis = React.useMemo(function () {\n    return (\n      // Disable ellipsis\n      !mergedEnableEllipsis ||\n      // Provide suffix\n      ellipsisConfig.suffix !== undefined || ellipsisConfig.onEllipsis ||\n      // Can't use css ellipsis since we need to provide the place for button\n      ellipsisConfig.expandable || enableEdit || enableCopy\n    );\n  }, [mergedEnableEllipsis, ellipsisConfig, enableEdit, enableCopy]);\n  (0, _useLayoutEffect[\"default\"])(function () {\n    if (enableEllipsis && !needMeasureEllipsis) {\n      setIsLineClampSupport((0, _styleChecker.isStyleSupport)('webkitLineClamp'));\n      setIsTextOverflowSupport((0, _styleChecker.isStyleSupport)('textOverflow'));\n    }\n  }, [needMeasureEllipsis, enableEllipsis]);\n  var cssEllipsis = React.useMemo(function () {\n    if (needMeasureEllipsis) {\n      return false;\n    }\n    if (rows === 1) {\n      return isTextOverflowSupport;\n    }\n    return isLineClampSupport;\n  }, [needMeasureEllipsis, isTextOverflowSupport, isLineClampSupport]);\n  var isMergedEllipsis = mergedEnableEllipsis && (cssEllipsis ? isNativeEllipsis : isJsEllipsis);\n  var cssTextOverflow = mergedEnableEllipsis && rows === 1 && cssEllipsis;\n  var cssLineClamp = mergedEnableEllipsis && rows > 1 && cssEllipsis;\n  // >>>>> Expand\n  var onExpandClick = function onExpandClick(e) {\n    var _a;\n    setExpanded(true);\n    (_a = ellipsisConfig.onExpand) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, e);\n  };\n  var _React$useState15 = React.useState(0),\n    _React$useState16 = (0, _slicedToArray2[\"default\"])(_React$useState15, 2),\n    ellipsisWidth = _React$useState16[0],\n    setEllipsisWidth = _React$useState16[1];\n  var _React$useState17 = React.useState(0),\n    _React$useState18 = (0, _slicedToArray2[\"default\"])(_React$useState17, 2),\n    ellipsisFontSize = _React$useState18[0],\n    setEllipsisFontSize = _React$useState18[1];\n  var onResize = function onResize(_ref2, element) {\n    var offsetWidth = _ref2.offsetWidth;\n    var _a;\n    setEllipsisWidth(offsetWidth);\n    setEllipsisFontSize(parseInt((_a = window.getComputedStyle) === null || _a === void 0 ? void 0 : _a.call(window, element).fontSize, 10) || 0);\n  };\n  // >>>>> JS Ellipsis\n  var onJsEllipsis = function onJsEllipsis(jsEllipsis) {\n    var _a;\n    setIsJsEllipsis(jsEllipsis);\n    // Trigger if changed\n    if (isJsEllipsis !== jsEllipsis) {\n      (_a = ellipsisConfig.onEllipsis) === null || _a === void 0 ? void 0 : _a.call(ellipsisConfig, jsEllipsis);\n    }\n  };\n  // >>>>> Native ellipsis\n  React.useEffect(function () {\n    var textEle = typographyRef.current;\n    if (enableEllipsis && cssEllipsis && textEle) {\n      var currentEllipsis = cssLineClamp ? textEle.offsetHeight < textEle.scrollHeight : textEle.offsetWidth < textEle.scrollWidth;\n      if (isNativeEllipsis !== currentEllipsis) {\n        setIsNativeEllipsis(currentEllipsis);\n      }\n    }\n  }, [enableEllipsis, cssEllipsis, children, cssLineClamp, isNativeVisible]);\n  // https://github.com/ant-design/ant-design/issues/36786\n  // Use IntersectionObserver to check if element is invisible\n  React.useEffect(function () {\n    var textEle = typographyRef.current;\n    if (typeof IntersectionObserver === 'undefined' || !textEle || !cssEllipsis || !mergedEnableEllipsis) {\n      return;\n    }\n    /* eslint-disable-next-line compat/compat */\n    var observer = new IntersectionObserver(function () {\n      setIsNativeVisible(!!textEle.offsetParent);\n    });\n    observer.observe(textEle);\n    return function () {\n      observer.disconnect();\n    };\n  }, [cssEllipsis, mergedEnableEllipsis]);\n  // ========================== Tooltip ===========================\n  var tooltipProps = {};\n  if (ellipsisConfig.tooltip === true) {\n    tooltipProps = {\n      title: (_a = editConfig.text) !== null && _a !== void 0 ? _a : children\n    };\n  } else if ( /*#__PURE__*/React.isValidElement(ellipsisConfig.tooltip)) {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  } else if ((0, _typeof2[\"default\"])(ellipsisConfig.tooltip) === 'object') {\n    tooltipProps = (0, _extends2[\"default\"])({\n      title: (_b = editConfig.text) !== null && _b !== void 0 ? _b : children\n    }, ellipsisConfig.tooltip);\n  } else {\n    tooltipProps = {\n      title: ellipsisConfig.tooltip\n    };\n  }\n  var topAriaLabel = React.useMemo(function () {\n    var isValid = function isValid(val) {\n      return ['string', 'number'].includes((0, _typeof2[\"default\"])(val));\n    };\n    if (!enableEllipsis || cssEllipsis) {\n      return undefined;\n    }\n    if (isValid(editConfig.text)) {\n      return editConfig.text;\n    }\n    if (isValid(children)) {\n      return children;\n    }\n    if (isValid(title)) {\n      return title;\n    }\n    if (isValid(tooltipProps.title)) {\n      return tooltipProps.title;\n    }\n    return undefined;\n  }, [enableEllipsis, cssEllipsis, title, tooltipProps.title, isMergedEllipsis]);\n  // =========================== Render ===========================\n  // >>>>>>>>>>> Editing input\n  if (editing) {\n    return /*#__PURE__*/React.createElement(_Editable[\"default\"], {\n      value: (_c = editConfig.text) !== null && _c !== void 0 ? _c : typeof children === 'string' ? children : '',\n      onSave: onEditChange,\n      onCancel: onEditCancel,\n      onEnd: editConfig.onEnd,\n      prefixCls: prefixCls,\n      className: className,\n      style: style,\n      direction: direction,\n      component: component,\n      maxLength: editConfig.maxLength,\n      autoSize: editConfig.autoSize,\n      enterIcon: editConfig.enterIcon\n    });\n  }\n  // >>>>>>>>>>> Typography\n  // Expand\n  var renderExpand = function renderExpand() {\n    var expandable = ellipsisConfig.expandable,\n      symbol = ellipsisConfig.symbol;\n    if (!expandable) return null;\n    var expandContent;\n    if (symbol) {\n      expandContent = symbol;\n    } else {\n      expandContent = textLocale.expand;\n    }\n    return /*#__PURE__*/React.createElement(\"a\", {\n      key: \"expand\",\n      className: \"\".concat(prefixCls, \"-expand\"),\n      onClick: onExpandClick,\n      \"aria-label\": textLocale.expand\n    }, expandContent);\n  };\n  // Edit\n  var renderEdit = function renderEdit() {\n    if (!enableEdit) return;\n    var icon = editConfig.icon,\n      tooltip = editConfig.tooltip;\n    var editTitle = (0, _toArray[\"default\"])(tooltip)[0] || textLocale.edit;\n    var ariaLabel = typeof editTitle === 'string' ? editTitle : '';\n    return triggerType.includes('icon') ? ( /*#__PURE__*/React.createElement(_tooltip[\"default\"], {\n      key: \"edit\",\n      title: tooltip === false ? '' : editTitle\n    }, /*#__PURE__*/React.createElement(_transButton[\"default\"], {\n      ref: editIconRef,\n      className: \"\".concat(prefixCls, \"-edit\"),\n      onClick: onEditClick,\n      \"aria-label\": ariaLabel\n    }, icon || /*#__PURE__*/React.createElement(_EditOutlined[\"default\"], {\n      role: \"button\"\n    })))) : null;\n  };\n  // Copy\n  var renderCopy = function renderCopy() {\n    if (!enableCopy) return;\n    var tooltips = copyConfig.tooltips,\n      icon = copyConfig.icon;\n    var tooltipNodes = toList(tooltips);\n    var iconNodes = toList(icon);\n    var copyTitle = copied ? getNode(tooltipNodes[1], textLocale.copied) : getNode(tooltipNodes[0], textLocale.copy);\n    var systemStr = copied ? textLocale.copied : textLocale.copy;\n    var ariaLabel = typeof copyTitle === 'string' ? copyTitle : systemStr;\n    return /*#__PURE__*/React.createElement(_tooltip[\"default\"], {\n      key: \"copy\",\n      title: copyTitle\n    }, /*#__PURE__*/React.createElement(_transButton[\"default\"], {\n      className: (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-copy\"), copied && \"\".concat(prefixCls, \"-copy-success\")),\n      onClick: onCopyClick,\n      \"aria-label\": ariaLabel\n    }, copied ? getNode(iconNodes[1], /*#__PURE__*/React.createElement(_CheckOutlined[\"default\"], null), true) : getNode(iconNodes[0], /*#__PURE__*/React.createElement(_CopyOutlined[\"default\"], null), true)));\n  };\n  var renderOperations = function renderOperations(renderExpanded) {\n    return [renderExpanded && renderExpand(), renderEdit(), renderCopy()];\n  };\n  var renderEllipsis = function renderEllipsis(needEllipsis) {\n    return [needEllipsis && ( /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": true,\n      key: \"ellipsis\"\n    }, ELLIPSIS_STR)), ellipsisConfig.suffix, renderOperations(needEllipsis)];\n  };\n  return /*#__PURE__*/React.createElement(_rcResizeObserver[\"default\"], {\n    onResize: onResize,\n    disabled: !mergedEnableEllipsis || cssEllipsis\n  }, function (resizeRef) {\n    return /*#__PURE__*/React.createElement(_EllipsisTooltip[\"default\"], {\n      tooltipProps: tooltipProps,\n      enabledEllipsis: mergedEnableEllipsis,\n      isEllipsis: isMergedEllipsis\n    }, /*#__PURE__*/React.createElement(_Typography[\"default\"], (0, _extends2[\"default\"])({\n      className: (0, _classnames[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])({}, \"\".concat(prefixCls, \"-\").concat(type), type), \"\".concat(prefixCls, \"-disabled\"), disabled), \"\".concat(prefixCls, \"-ellipsis\"), enableEllipsis), \"\".concat(prefixCls, \"-single-line\"), mergedEnableEllipsis && rows === 1), \"\".concat(prefixCls, \"-ellipsis-single-line\"), cssTextOverflow), \"\".concat(prefixCls, \"-ellipsis-multiple-line\"), cssLineClamp), className),\n      prefixCls: customizePrefixCls,\n      style: (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, style), {\n        WebkitLineClamp: cssLineClamp ? rows : undefined\n      }),\n      component: component,\n      ref: (0, _ref3.composeRef)(resizeRef, typographyRef, ref),\n      direction: direction,\n      onClick: triggerType.includes('text') ? onEditClick : undefined,\n      \"aria-label\": topAriaLabel === null || topAriaLabel === void 0 ? void 0 : topAriaLabel.toString(),\n      title: title\n    }, textProps), /*#__PURE__*/React.createElement(_Ellipsis[\"default\"], {\n      enabledMeasure: mergedEnableEllipsis && !cssEllipsis,\n      text: children,\n      rows: rows,\n      width: ellipsisWidth,\n      fontSize: ellipsisFontSize,\n      onEllipsis: onJsEllipsis\n    }, function (node, needEllipsis) {\n      var renderNode = node;\n      if (node.length && needEllipsis && topAriaLabel) {\n        renderNode = /*#__PURE__*/React.createElement(\"span\", {\n          key: \"show-content\",\n          \"aria-hidden\": true\n        }, renderNode);\n      }\n      var wrappedContext = wrapperDecorations(props, /*#__PURE__*/React.createElement(React.Fragment, null, renderNode, renderEllipsis(needEllipsis)));\n      return wrappedContext;\n    })));\n  });\n});\nvar _default = exports[\"default\"] = Base;","map":null,"metadata":{},"sourceType":"script"}