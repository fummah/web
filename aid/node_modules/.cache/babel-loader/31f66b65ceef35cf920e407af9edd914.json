{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _TableContext = _interopRequireDefault(require(\"../context/TableContext\"));\nvar _ExpandedRow = _interopRequireDefault(require(\"./ExpandedRow\"));\nvar _BodyContext = _interopRequireDefault(require(\"../context/BodyContext\"));\nvar _valueUtil = require(\"../utils/valueUtil\");\nvar _ResizeContext = _interopRequireDefault(require(\"../context/ResizeContext\"));\nvar _BodyRow = _interopRequireDefault(require(\"./BodyRow\"));\nvar _useFlattenRecords = _interopRequireDefault(require(\"../hooks/useFlattenRecords\"));\nvar _HoverContext = _interopRequireDefault(require(\"../context/HoverContext\"));\nvar _PerfContext = _interopRequireDefault(require(\"../context/PerfContext\"));\nvar _MeasureRow = _interopRequireDefault(require(\"./MeasureRow\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction Body(_ref) {\n  var data = _ref.data,\n    getRowKey = _ref.getRowKey,\n    measureColumnWidth = _ref.measureColumnWidth,\n    expandedKeys = _ref.expandedKeys,\n    onRow = _ref.onRow,\n    rowExpandable = _ref.rowExpandable,\n    emptyNode = _ref.emptyNode,\n    childrenColumnName = _ref.childrenColumnName;\n  var _React$useContext = React.useContext(_ResizeContext.default),\n    onColumnResize = _React$useContext.onColumnResize;\n  var _React$useContext2 = React.useContext(_TableContext.default),\n    prefixCls = _React$useContext2.prefixCls,\n    getComponent = _React$useContext2.getComponent;\n  var _React$useContext3 = React.useContext(_BodyContext.default),\n    flattenColumns = _React$useContext3.flattenColumns;\n  var flattenData = (0, _useFlattenRecords.default)(data, childrenColumnName, expandedKeys, getRowKey); // =================== Performance ====================\n\n  var perfRef = React.useRef({\n    renderWithProps: false\n  }); // ====================== Hover =======================\n\n  var _React$useState = React.useState(-1),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    startRow = _React$useState2[0],\n    setStartRow = _React$useState2[1];\n  var _React$useState3 = React.useState(-1),\n    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n    endRow = _React$useState4[0],\n    setEndRow = _React$useState4[1];\n  var onHover = React.useCallback(function (start, end) {\n    setStartRow(start);\n    setEndRow(end);\n  }, []); // ====================== Render ======================\n\n  var bodyNode = React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n    if (data.length) {\n      rows = flattenData.map(function (item, idx) {\n        var record = item.record,\n          indent = item.indent,\n          renderIndex = item.index;\n        var key = getRowKey(record, idx);\n        return /*#__PURE__*/React.createElement(_BodyRow.default, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: idx,\n          renderIndex: renderIndex,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName,\n          indent: indent\n        });\n      });\n    } else {\n      rows = /*#__PURE__*/React.createElement(_ExpandedRow.default, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        component: trComponent,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length,\n        isEmpty: true\n      }, emptyNode);\n    }\n    var columnsKey = (0, _valueUtil.getColumnsKey)(flattenColumns);\n    return /*#__PURE__*/React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && /*#__PURE__*/React.createElement(_MeasureRow.default, {\n      prefixCls: prefixCls,\n      columnsKey: columnsKey,\n      onColumnResize: onColumnResize\n    }), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, expandedKeys, getRowKey, getComponent, emptyNode, flattenColumns, childrenColumnName, onColumnResize, rowExpandable, flattenData]);\n  return /*#__PURE__*/React.createElement(_PerfContext.default.Provider, {\n    value: perfRef.current\n  }, /*#__PURE__*/React.createElement(_HoverContext.default.Provider, {\n    value: {\n      startRow: startRow,\n      endRow: endRow,\n      onHover: onHover\n    }\n  }, bodyNode));\n}\nvar MemoBody = /*#__PURE__*/React.memo(Body);\nMemoBody.displayName = 'Body';\nvar _default = MemoBody;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}