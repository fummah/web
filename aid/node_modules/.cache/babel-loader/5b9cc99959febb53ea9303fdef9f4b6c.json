{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _rcFieldForm = require(\"rc-field-form\");\nvar _useState3 = _interopRequireDefault(require(\"rc-util/lib/hooks/useState\"));\nvar _ref2 = require(\"rc-util/lib/ref\");\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar React = _react;\nvar _useFormItemStatus = _interopRequireDefault(require(\"../hooks/useFormItemStatus\"));\nvar _configProvider = require(\"../../config-provider\");\nvar _reactNode = require(\"../../_util/reactNode\");\nvar _type = require(\"../../_util/type\");\nvar _warning = _interopRequireDefault(require(\"../../_util/warning\"));\nvar _context = require(\"../context\");\nvar _useFrameState3 = _interopRequireDefault(require(\"../hooks/useFrameState\"));\nvar _useItemRef = _interopRequireDefault(require(\"../hooks/useItemRef\"));\nvar _util = require(\"../util\");\nvar _ItemHolder = _interopRequireDefault(require(\"./ItemHolder\"));\nvar NAME_SPLIT = '__SPLIT__';\nvar ValidateStatuses = (0, _type.tuple)('success', 'warning', 'error', 'validating', '');\nvar MemoInput = /*#__PURE__*/React.memo(function (_ref) {\n  var children = _ref.children;\n  return children;\n}, function (prev, next) {\n  return prev.value === next.value && prev.update === next.update && prev.childProps.length === next.childProps.length && prev.childProps.every(function (value, index) {\n    return value === next.childProps[index];\n  });\n});\nfunction hasValidName(name) {\n  if (name === null) {\n    process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', '`null` is passed as `name` property') : void 0;\n  }\n  return !(name === undefined || name === null);\n}\nfunction genEmptyMeta() {\n  return {\n    errors: [],\n    warnings: [],\n    touched: false,\n    validating: false,\n    validated: false,\n    name: []\n  };\n}\nfunction InternalFormItem(props) {\n  var name = props.name,\n    noStyle = props.noStyle,\n    dependencies = props.dependencies,\n    customizePrefixCls = props.prefixCls,\n    shouldUpdate = props.shouldUpdate,\n    rules = props.rules,\n    children = props.children,\n    required = props.required,\n    label = props.label,\n    messageVariables = props.messageVariables,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,\n    validateTrigger = props.validateTrigger,\n    hidden = props.hidden;\n  var _useContext = (0, _react.useContext)(_configProvider.ConfigContext),\n    getPrefixCls = _useContext.getPrefixCls;\n  var _useContext2 = (0, _react.useContext)(_context.FormContext),\n    formName = _useContext2.name;\n  var isRenderProps = typeof children === 'function';\n  var notifyParentMetaChange = (0, _react.useContext)(_context.NoStyleItemContext);\n  var _useContext3 = (0, _react.useContext)(_rcFieldForm.FieldContext),\n    contextValidateTrigger = _useContext3.validateTrigger;\n  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;\n  var hasName = hasValidName(name);\n  var prefixCls = getPrefixCls('form', customizePrefixCls);\n  // ========================= MISC =========================\n  // Get `noStyle` required info\n  var listContext = React.useContext(_rcFieldForm.ListContext);\n  var fieldKeyPathRef = React.useRef();\n  // ======================== Errors ========================\n  // >>>>> Collect sub field errors\n  var _useFrameState = (0, _useFrameState3[\"default\"])({}),\n    _useFrameState2 = (0, _slicedToArray2[\"default\"])(_useFrameState, 2),\n    subFieldErrors = _useFrameState2[0],\n    setSubFieldErrors = _useFrameState2[1];\n  // >>>>> Current field errors\n  var _useState = (0, _useState3[\"default\"])(function () {\n      return genEmptyMeta();\n    }),\n    _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n    meta = _useState2[0],\n    setMeta = _useState2[1];\n  var onMetaChange = function onMetaChange(nextMeta) {\n    // This keyInfo is not correct when field is removed\n    // Since origin keyManager no longer keep the origin key anymore\n    // Which means we need cache origin one and reuse when removed\n    var keyInfo = listContext === null || listContext === void 0 ? void 0 : listContext.getKey(nextMeta.name);\n    // Destroy will reset all the meta\n    setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta, true);\n    // Bump to parent since noStyle\n    if (noStyle && notifyParentMetaChange) {\n      var namePath = nextMeta.name;\n      if (!nextMeta.destroy) {\n        if (keyInfo !== undefined) {\n          var _keyInfo = (0, _slicedToArray2[\"default\"])(keyInfo, 2),\n            fieldKey = _keyInfo[0],\n            restPath = _keyInfo[1];\n          namePath = [fieldKey].concat((0, _toConsumableArray2[\"default\"])(restPath));\n          fieldKeyPathRef.current = namePath;\n        }\n      } else {\n        // Use origin cache data\n        namePath = fieldKeyPathRef.current || namePath;\n      }\n      notifyParentMetaChange(nextMeta, namePath);\n    }\n  };\n  // >>>>> Collect noStyle Field error to the top FormItem\n  var onSubItemMetaChange = function onSubItemMetaChange(subMeta, uniqueKeys) {\n    // Only `noStyle` sub item will trigger\n    setSubFieldErrors(function (prevSubFieldErrors) {\n      var clone = (0, _extends2[\"default\"])({}, prevSubFieldErrors);\n      // name: ['user', 1] + key: [4] = ['user', 4]\n      var mergedNamePath = [].concat((0, _toConsumableArray2[\"default\"])(subMeta.name.slice(0, -1)), (0, _toConsumableArray2[\"default\"])(uniqueKeys));\n      var mergedNameKey = mergedNamePath.join(NAME_SPLIT);\n      if (subMeta.destroy) {\n        // Remove\n        delete clone[mergedNameKey];\n      } else {\n        // Update\n        clone[mergedNameKey] = subMeta;\n      }\n      return clone;\n    });\n  };\n  // >>>>> Get merged errors\n  var _React$useMemo = React.useMemo(function () {\n      var errorList = (0, _toConsumableArray2[\"default\"])(meta.errors);\n      var warningList = (0, _toConsumableArray2[\"default\"])(meta.warnings);\n      Object.values(subFieldErrors).forEach(function (subFieldError) {\n        errorList.push.apply(errorList, (0, _toConsumableArray2[\"default\"])(subFieldError.errors || []));\n        warningList.push.apply(warningList, (0, _toConsumableArray2[\"default\"])(subFieldError.warnings || []));\n      });\n      return [errorList, warningList];\n    }, [subFieldErrors, meta.errors, meta.warnings]),\n    _React$useMemo2 = (0, _slicedToArray2[\"default\"])(_React$useMemo, 2),\n    mergedErrors = _React$useMemo2[0],\n    mergedWarnings = _React$useMemo2[1];\n  // ===================== Children Ref =====================\n  var getItemRef = (0, _useItemRef[\"default\"])();\n  // ======================== Render ========================\n  function renderLayout(baseChildren, fieldId, isRequired) {\n    if (noStyle && !hidden) {\n      return baseChildren;\n    }\n    return /*#__PURE__*/React.createElement(_ItemHolder[\"default\"], (0, _extends2[\"default\"])({\n      key: \"row\"\n    }, props, {\n      prefixCls: prefixCls,\n      fieldId: fieldId,\n      isRequired: isRequired,\n      errors: mergedErrors,\n      warnings: mergedWarnings,\n      meta: meta,\n      onSubItemMetaChange: onSubItemMetaChange\n    }), baseChildren);\n  }\n  if (!hasName && !isRenderProps && !dependencies) {\n    return renderLayout(children);\n  }\n  var variables = {};\n  if (typeof label === 'string') {\n    variables.label = label;\n  } else if (name) {\n    variables.label = String(name);\n  }\n  if (messageVariables) {\n    variables = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, variables), messageVariables);\n  }\n  // >>>>> With Field\n  return /*#__PURE__*/React.createElement(_rcFieldForm.Field, (0, _extends2[\"default\"])({}, props, {\n    messageVariables: variables,\n    trigger: trigger,\n    validateTrigger: mergedValidateTrigger,\n    onMetaChange: onMetaChange\n  }), function (control, renderMeta, context) {\n    var mergedName = (0, _util.toArray)(name).length && renderMeta ? renderMeta.name : [];\n    var fieldId = (0, _util.getFieldId)(mergedName, formName);\n    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {\n      if (rule && (0, _typeof2[\"default\"])(rule) === 'object' && rule.required && !rule.warningOnly) {\n        return true;\n      }\n      if (typeof rule === 'function') {\n        var ruleEntity = rule(context);\n        return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;\n      }\n      return false;\n    }));\n    // ======================= Children =======================\n    var mergedControl = (0, _extends2[\"default\"])({}, control);\n    var childNode = null;\n    process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!(shouldUpdate && dependencies), 'Form.Item', \"`shouldUpdate` and `dependencies` shouldn't be used together. See https://u.ant.design/form-deps.\") : void 0;\n    if (Array.isArray(children) && hasName) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', 'A `Form.Item` with a `name` prop must have a single child element. For information on how to render more complex form items, see https://u.ant.design/complex-form-item.') : void 0;\n      childNode = children;\n    } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!!(shouldUpdate || dependencies), 'Form.Item', 'A `Form.Item` with a render function must have either `shouldUpdate` or `dependencies`.') : void 0;\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!hasName, 'Form.Item', 'A `Form.Item` with a render function cannot be a field, and thus cannot have a `name` prop.') : void 0;\n    } else if (dependencies && !isRenderProps && !hasName) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(false, 'Form.Item', 'Must set `name` or use a render function when `dependencies` is set.') : void 0;\n    } else if ((0, _reactNode.isValidElement)(children)) {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(children.props.defaultValue === undefined, 'Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.') : void 0;\n      var childProps = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, children.props), mergedControl);\n      if (!childProps.id) {\n        childProps.id = fieldId;\n      }\n      if (props.help || mergedErrors.length > 0 || mergedWarnings.length > 0 || props.extra) {\n        var describedbyArr = [];\n        if (props.help || mergedErrors.length > 0) {\n          describedbyArr.push(\"\".concat(fieldId, \"_help\"));\n        }\n        if (props.extra) {\n          describedbyArr.push(\"\".concat(fieldId, \"_extra\"));\n        }\n        childProps['aria-describedby'] = describedbyArr.join(' ');\n      }\n      if (mergedErrors.length > 0) {\n        childProps['aria-invalid'] = 'true';\n      }\n      if (isRequired) {\n        childProps['aria-required'] = 'true';\n      }\n      if ((0, _ref2.supportRef)(children)) {\n        childProps.ref = getItemRef(mergedName, children);\n      }\n      // We should keep user origin event handler\n      var triggers = new Set([].concat((0, _toConsumableArray2[\"default\"])((0, _util.toArray)(trigger)), (0, _toConsumableArray2[\"default\"])((0, _util.toArray)(mergedValidateTrigger))));\n      triggers.forEach(function (eventName) {\n        childProps[eventName] = function () {\n          var _a2, _c2;\n          var _a, _b, _c;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));\n        };\n      });\n      // List of props that need to be watched for changes -> if changes are detected in MemoInput -> rerender\n      var watchingChildProps = [childProps['aria-required'], childProps['aria-invalid'], childProps['aria-describedby']];\n      childNode = /*#__PURE__*/React.createElement(MemoInput, {\n        value: mergedControl[props.valuePropName || 'value'],\n        update: children,\n        childProps: watchingChildProps\n      }, (0, _reactNode.cloneElement)(children, childProps));\n    } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {\n      childNode = children(context);\n    } else {\n      process.env.NODE_ENV !== \"production\" ? (0, _warning[\"default\"])(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.') : void 0;\n      childNode = children;\n    }\n    return renderLayout(childNode, fieldId, isRequired);\n  });\n}\nvar FormItem = InternalFormItem;\nFormItem.useStatus = _useFormItemStatus[\"default\"];\nvar _default = exports[\"default\"] = FormItem;","map":null,"metadata":{},"sourceType":"script"}