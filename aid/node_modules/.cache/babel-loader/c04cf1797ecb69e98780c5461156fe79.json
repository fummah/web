{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\aid_f\\\\source\\\\src\\\\routes\\\\extensions\\\\charts\\\\amchart\\\\area\\\\Components\\\\AreaWithTimeBased.js\";\nimport React from \"react\";\nimport AmCharts from \"@amcharts/amcharts3-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AreaWithTimeBased = () => {\n  const chartData = generateChartData();\n  const config = {\n    \"type\": \"serial\",\n    \"theme\": \"light\",\n    \"marginRight\": 80,\n    \"dataProvider\": chartData,\n    \"valueAxes\": [{\n      \"position\": \"left\",\n      \"title\": \"Unique visitors\"\n    }],\n    \"graphs\": [{\n      \"id\": \"g1\",\n      \"fillAlphas\": 0.4,\n      \"valueField\": \"visits\",\n      \"balloonText\": \"<div style='margin:5px; font-size:19px;'>Visits:<b>[[value]]</b></div>\"\n    }],\n    \"chartScrollbar\": {\n      \"graph\": \"g1\",\n      \"scrollbarHeight\": 80,\n      \"backgroundAlpha\": 0,\n      \"selectedBackgroundAlpha\": 0.1,\n      \"selectedBackgroundColor\": \"#888888\",\n      \"graphFillAlpha\": 0,\n      \"graphLineAlpha\": 0.5,\n      \"selectedGraphFillAlpha\": 0,\n      \"selectedGraphLineAlpha\": 1,\n      \"autoGridCount\": true,\n      \"color\": \"#AAAAAA\"\n    },\n    \"chartCursor\": {\n      \"categoryBalloonDateFormat\": \"JJ:NN, DD MMMM\",\n      \"cursorPosition\": \"mouse\"\n    },\n    \"categoryField\": \"date\",\n    \"categoryAxis\": {\n      \"minPeriod\": \"mm\",\n      \"parseDates\": true\n    },\n    \"export\": {\n      \"enabled\": true,\n      \"dateFormat\": \"YYYY-MM-DD HH:NN:SS\"\n    }\n  };\n\n  // generate some random data, quite different range\n  function generateChartData() {\n    let chartData = [];\n    // current date\n    const firstDate = new Date();\n    // now set 500 minutes back\n    firstDate.setMinutes(firstDate.getDate() - 1000);\n\n    // and generate 500 data items\n    let visits = 500;\n    for (let i = 0; i < 500; i++) {\n      const newDate = new Date(firstDate);\n      // each time we add one minute\n      newDate.setMinutes(newDate.getMinutes() + i);\n      // some random number\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      // add data item to the array\n      chartData.push({\n        date: newDate,\n        visits: visits\n      });\n    }\n    return chartData;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AmCharts.React, {\n      style: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      options: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = AreaWithTimeBased;\nexport default AreaWithTimeBased;\nvar _c;\n$RefreshReg$(_c, \"AreaWithTimeBased\");","map":{"version":3,"names":["React","AmCharts","jsxDEV","_jsxDEV","AreaWithTimeBased","chartData","generateChartData","config","firstDate","Date","setMinutes","getDate","visits","i","newDate","getMinutes","Math","round","random","push","date","className","children","style","width","height","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/aid_f/source/src/routes/extensions/charts/amchart/area/Components/AreaWithTimeBased.js"],"sourcesContent":["import React from \"react\";\r\nimport AmCharts from \"@amcharts/amcharts3-react\";\r\n\r\nconst AreaWithTimeBased = () => {\r\n\r\n  const chartData = generateChartData();\r\n  const config = {\r\n    \"type\": \"serial\",\r\n    \"theme\": \"light\",\r\n    \"marginRight\": 80,\r\n    \"dataProvider\": chartData,\r\n    \"valueAxes\": [{\r\n      \"position\": \"left\",\r\n      \"title\": \"Unique visitors\"\r\n    }],\r\n    \"graphs\": [{\r\n      \"id\": \"g1\",\r\n      \"fillAlphas\": 0.4,\r\n      \"valueField\": \"visits\",\r\n      \"balloonText\": \"<div style='margin:5px; font-size:19px;'>Visits:<b>[[value]]</b></div>\"\r\n    }],\r\n    \"chartScrollbar\": {\r\n      \"graph\": \"g1\",\r\n      \"scrollbarHeight\": 80,\r\n      \"backgroundAlpha\": 0,\r\n      \"selectedBackgroundAlpha\": 0.1,\r\n      \"selectedBackgroundColor\": \"#888888\",\r\n      \"graphFillAlpha\": 0,\r\n      \"graphLineAlpha\": 0.5,\r\n      \"selectedGraphFillAlpha\": 0,\r\n      \"selectedGraphLineAlpha\": 1,\r\n      \"autoGridCount\": true,\r\n      \"color\": \"#AAAAAA\"\r\n    },\r\n    \"chartCursor\": {\r\n      \"categoryBalloonDateFormat\": \"JJ:NN, DD MMMM\",\r\n      \"cursorPosition\": \"mouse\"\r\n    },\r\n    \"categoryField\": \"date\",\r\n    \"categoryAxis\": {\r\n      \"minPeriod\": \"mm\",\r\n      \"parseDates\": true\r\n    },\r\n    \"export\": {\r\n      \"enabled\": true,\r\n      \"dateFormat\": \"YYYY-MM-DD HH:NN:SS\"\r\n    }\r\n  };\r\n\r\n\r\n// generate some random data, quite different range\r\n  function generateChartData() {\r\n    let chartData = [];\r\n    // current date\r\n    const firstDate = new Date();\r\n    // now set 500 minutes back\r\n    firstDate.setMinutes(firstDate.getDate() - 1000);\r\n\r\n    // and generate 500 data items\r\n    let visits = 500;\r\n    for (let i = 0; i < 500; i++) {\r\n      const newDate = new Date(firstDate);\r\n      // each time we add one minute\r\n      newDate.setMinutes(newDate.getMinutes() + i);\r\n      // some random number\r\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\r\n      // add data item to the array\r\n      chartData.push({\r\n        date: newDate,\r\n        visits: visits\r\n      });\r\n    }\r\n    return chartData;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AmCharts.React style={{width: \"100%\", height: \"500px\"}} options={config}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AreaWithTimeBased;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}