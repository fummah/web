{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLayoutState = useLayoutState;\nexports.useTimeoutLock = useTimeoutLock;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\n\n/**\n * Execute code before next frame but async\n */\nfunction useLayoutState(defaultState) {\n  var stateRef = (0, _react.useRef)(defaultState);\n  var _useState = (0, _react.useState)({}),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    forceUpdate = _useState2[1];\n  var lastPromiseRef = (0, _react.useRef)(null);\n  var updateBatchRef = (0, _react.useRef)([]);\n  function setFrameState(updater) {\n    updateBatchRef.current.push(updater);\n    var promise = Promise.resolve();\n    lastPromiseRef.current = promise;\n    promise.then(function () {\n      if (lastPromiseRef.current === promise) {\n        var prevBatch = updateBatchRef.current;\n        var prevState = stateRef.current;\n        updateBatchRef.current = [];\n        prevBatch.forEach(function (batchUpdater) {\n          stateRef.current = batchUpdater(stateRef.current);\n        });\n        lastPromiseRef.current = null;\n        if (prevState !== stateRef.current) {\n          forceUpdate({});\n        }\n      }\n    });\n  }\n  (0, _react.useEffect)(function () {\n    return function () {\n      lastPromiseRef.current = null;\n    };\n  }, []);\n  return [stateRef.current, setFrameState];\n}\n/** Lock frame, when frame pass reset the lock. */\n\nfunction useTimeoutLock(defaultState) {\n  var frameRef = (0, _react.useRef)(defaultState || null);\n  var timeoutRef = (0, _react.useRef)();\n  function cleanUp() {\n    window.clearTimeout(timeoutRef.current);\n  }\n  function setState(newState) {\n    frameRef.current = newState;\n    cleanUp();\n    timeoutRef.current = window.setTimeout(function () {\n      frameRef.current = null;\n      timeoutRef.current = undefined;\n    }, 100);\n  }\n  function getState() {\n    return frameRef.current;\n  }\n  (0, _react.useEffect)(function () {\n    return cleanUp;\n  }, []);\n  return [setState, getState];\n}","map":null,"metadata":{},"sourceType":"script"}