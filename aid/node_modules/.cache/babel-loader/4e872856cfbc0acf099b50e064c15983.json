{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\aid_f\\\\source\\\\src\\\\routes\\\\components\\\\dataEntry\\\\AutoComplete\\\\NonCaseSensitiveAutoComplete.js\";\nimport React from \"react\";\nimport { AutoComplete, Card } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\nconst NonCaseSensitiveAutoComplete = () => {\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"gx-card\",\n    title: \"Non CaseSensitive AutoComplete\",\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      style: {\n        width: 200\n      },\n      dataSource: dataSource,\n      placeholder: \"try to type `b`\",\n      filterOption: (inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = NonCaseSensitiveAutoComplete;\nexport default NonCaseSensitiveAutoComplete;\nvar _c;\n$RefreshReg$(_c, \"NonCaseSensitiveAutoComplete\");","map":{"version":3,"names":["React","AutoComplete","Card","jsxDEV","_jsxDEV","dataSource","NonCaseSensitiveAutoComplete","className","title","children","style","width","placeholder","filterOption","inputValue","option","props","toUpperCase","indexOf","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/wamp64/www/aid_f/source/src/routes/components/dataEntry/AutoComplete/NonCaseSensitiveAutoComplete.js"],"sourcesContent":["import React from \"react\";\r\nimport {AutoComplete, Card} from \"antd\";\r\n\r\nconst dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\r\n\r\nconst NonCaseSensitiveAutoComplete = () => {\r\n  return (\r\n    <Card className=\"gx-card\" title=\"Non CaseSensitive AutoComplete\">\r\n      <AutoComplete\r\n        style={{width: 200}}\r\n        dataSource={dataSource}\r\n        placeholder=\"try to type `b`\"\r\n        filterOption={(inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NonCaseSensitiveAutoComplete;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,YAAY,EAAEC,IAAI,QAAO,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAG,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,aAAa,CAAC;AAEtE,MAAMC,4BAA4B,GAAGA,CAAA,KAAM;EACzC,oBACEF,OAAA,CAACF,IAAI;IAACK,SAAS,EAAC,SAAS;IAACC,KAAK,EAAC,gCAAgC;IAAAC,QAAA,eAC9DL,OAAA,CAACH,YAAY;MACXS,KAAK,EAAE;QAACC,KAAK,EAAE;MAAG,CAAE;MACpBN,UAAU,EAAEA,UAAW;MACvBO,WAAW,EAAC,iBAAiB;MAC7BC,YAAY,EAAEA,CAACC,UAAU,EAAEC,MAAM,KAAKA,MAAM,CAACC,KAAK,CAACP,QAAQ,CAACQ,WAAW,CAAC,CAAC,CAACC,OAAO,CAACJ,UAAU,CAACG,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACC,EAAA,GAXIjB,4BAA4B;AAalC,eAAeA,4BAA4B;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}