{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = usePatchElement;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction usePatchElement() {\n  var _React$useState = React.useState([]),\n    _React$useState2 = (0, _slicedToArray2[\"default\"])(_React$useState, 2),\n    elements = _React$useState2[0],\n    setElements = _React$useState2[1];\n  var patchElement = React.useCallback(function (element) {\n    // append a new element to elements (and create a new ref)\n    setElements(function (originElements) {\n      return [].concat((0, _toConsumableArray2[\"default\"])(originElements), [element]);\n    });\n    // return a function that removes the new element out of elements (and create a new ref)\n    // it works a little like useEffect\n    return function () {\n      setElements(function (originElements) {\n        return originElements.filter(function (ele) {\n          return ele !== element;\n        });\n      });\n    };\n  }, []);\n  return [elements, patchElement];\n}","map":null,"metadata":{},"sourceType":"script"}