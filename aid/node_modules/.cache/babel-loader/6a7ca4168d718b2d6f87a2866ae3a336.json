{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _isNativeReflectConstruct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/isNativeReflectConstruct\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _CloseCircleFilled = _interopRequireDefault(require(\"@ant-design/icons/CloseCircleFilled\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _context = require(\"../form/context\");\nvar _reactNode = require(\"../_util/reactNode\");\nvar _statusUtils = require(\"../_util/statusUtils\");\nvar _type = require(\"../_util/type\");\nfunction _callSuper(t, o, e) {\n  return o = (0, _getPrototypeOf2[\"default\"])(o), (0, _possibleConstructorReturn2[\"default\"])(t, (0, _isNativeReflectConstruct2[\"default\"])() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2[\"default\"])(t).constructor) : o.apply(t, e));\n}\nvar ClearableInputType = (0, _type.tuple)('text', 'input');\nfunction hasAddon(props) {\n  return !!(props.addonBefore || props.addonAfter);\n}\nvar ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(ClearableLabeledInput, _React$Component);\n  function ClearableLabeledInput() {\n    (0, _classCallCheck2[\"default\"])(this, ClearableLabeledInput);\n    return _callSuper(this, ClearableLabeledInput, arguments);\n  }\n  (0, _createClass2[\"default\"])(ClearableLabeledInput, [{\n    key: \"renderClearIcon\",\n    value: function renderClearIcon(prefixCls) {\n      var _this$props = this.props,\n        value = _this$props.value,\n        disabled = _this$props.disabled,\n        readOnly = _this$props.readOnly,\n        handleReset = _this$props.handleReset,\n        suffix = _this$props.suffix;\n      var needClear = !disabled && !readOnly && value;\n      var className = \"\".concat(prefixCls, \"-clear-icon\");\n      return /*#__PURE__*/React.createElement(_CloseCircleFilled[\"default\"], {\n        onClick: handleReset,\n        // Do not trigger onBlur when clear input\n        // https://github.com/ant-design/ant-design/issues/31200\n        onMouseDown: function onMouseDown(e) {\n          return e.preventDefault();\n        },\n        className: (0, _classnames[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])({}, \"\".concat(className, \"-hidden\"), !needClear), \"\".concat(className, \"-has-suffix\"), !!suffix), className),\n        role: \"button\"\n      });\n    }\n  }, {\n    key: \"renderTextAreaWithClearIcon\",\n    value: function renderTextAreaWithClearIcon(prefixCls, element, statusContext) {\n      var _this$props2 = this.props,\n        value = _this$props2.value,\n        allowClear = _this$props2.allowClear,\n        className = _this$props2.className,\n        focused = _this$props2.focused,\n        style = _this$props2.style,\n        direction = _this$props2.direction,\n        bordered = _this$props2.bordered,\n        hidden = _this$props2.hidden,\n        customStatus = _this$props2.status;\n      var contextStatus = statusContext.status,\n        hasFeedback = statusContext.hasFeedback;\n      if (!allowClear) {\n        return (0, _reactNode.cloneElement)(element, {\n          value: value\n        });\n      }\n      var affixWrapperCls = (0, _classnames[\"default\"])(\"\".concat(prefixCls, \"-affix-wrapper\"), \"\".concat(prefixCls, \"-affix-wrapper-textarea-with-clear-btn\"), (0, _statusUtils.getStatusClassNames)(\"\".concat(prefixCls, \"-affix-wrapper\"), (0, _statusUtils.getMergedStatus)(contextStatus, customStatus), hasFeedback), (0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])({}, \"\".concat(prefixCls, \"-affix-wrapper-focused\"), focused), \"\".concat(prefixCls, \"-affix-wrapper-rtl\"), direction === 'rtl'), \"\".concat(prefixCls, \"-affix-wrapper-borderless\"), !bordered), \"\".concat(className), !hasAddon(this.props) && className));\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: affixWrapperCls,\n        style: style,\n        hidden: hidden\n      }, (0, _reactNode.cloneElement)(element, {\n        style: null,\n        value: value\n      }), this.renderClearIcon(prefixCls));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n      return /*#__PURE__*/React.createElement(_context.FormItemInputContext.Consumer, null, function (statusContext) {\n        var _this$props3 = _this.props,\n          prefixCls = _this$props3.prefixCls,\n          inputType = _this$props3.inputType,\n          element = _this$props3.element;\n        if (inputType === ClearableInputType[0]) {\n          return _this.renderTextAreaWithClearIcon(prefixCls, element, statusContext);\n        }\n      });\n    }\n  }]);\n  return ClearableLabeledInput;\n}(React.Component);\nvar _default = exports[\"default\"] = ClearableLabeledInput;","map":null,"metadata":{},"sourceType":"script"}