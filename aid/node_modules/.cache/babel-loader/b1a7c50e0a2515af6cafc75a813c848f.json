{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\")[\"default\"];\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\")[\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _HolderOutlined = _interopRequireDefault(require(\"@ant-design/icons/HolderOutlined\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _rcTree = _interopRequireDefault(require(\"rc-tree\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _configProvider = require(\"../config-provider\");\nvar _motion = _interopRequireDefault(require(\"../_util/motion\"));\nvar _dropIndicator = _interopRequireDefault(require(\"./utils/dropIndicator\"));\nvar _iconUtil = _interopRequireDefault(require(\"./utils/iconUtil\"));\nvar Tree = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _React$useContext = React.useContext(_configProvider.ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction,\n    virtual = _React$useContext.virtual;\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    _props$showIcon = props.showIcon,\n    showIcon = _props$showIcon === void 0 ? false : _props$showIcon,\n    showLine = props.showLine,\n    _switcherIcon = props.switcherIcon,\n    _props$blockNode = props.blockNode,\n    blockNode = _props$blockNode === void 0 ? false : _props$blockNode,\n    children = props.children,\n    _props$checkable = props.checkable,\n    checkable = _props$checkable === void 0 ? false : _props$checkable,\n    _props$selectable = props.selectable,\n    selectable = _props$selectable === void 0 ? true : _props$selectable,\n    draggable = props.draggable,\n    _props$motion = props.motion,\n    motion = _props$motion === void 0 ? (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, _motion[\"default\"]), {\n      motionAppear: false\n    }) : _props$motion;\n  var prefixCls = getPrefixCls('tree', customizePrefixCls);\n  var newProps = (0, _extends2[\"default\"])((0, _extends2[\"default\"])({}, props), {\n    checkable: checkable,\n    selectable: selectable,\n    showIcon: showIcon,\n    motion: motion,\n    blockNode: blockNode,\n    showLine: Boolean(showLine),\n    dropIndicatorRender: _dropIndicator[\"default\"]\n  });\n  var draggableConfig = React.useMemo(function () {\n    if (!draggable) {\n      return false;\n    }\n    var mergedDraggable = {};\n    switch ((0, _typeof2[\"default\"])(draggable)) {\n      case 'function':\n        mergedDraggable.nodeDraggable = draggable;\n        break;\n      case 'object':\n        mergedDraggable = (0, _extends2[\"default\"])({}, draggable);\n        break;\n      default:\n        break;\n      // Do nothing\n    }\n    if (mergedDraggable.icon !== false) {\n      mergedDraggable.icon = mergedDraggable.icon || /*#__PURE__*/React.createElement(_HolderOutlined[\"default\"], null);\n    }\n    return mergedDraggable;\n  }, [draggable]);\n  return /*#__PURE__*/React.createElement(_rcTree[\"default\"], (0, _extends2[\"default\"])({\n    itemHeight: 20,\n    ref: ref,\n    virtual: virtual\n  }, newProps, {\n    prefixCls: prefixCls,\n    className: (0, _classnames[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])((0, _defineProperty2[\"default\"])({}, \"\".concat(prefixCls, \"-icon-hide\"), !showIcon), \"\".concat(prefixCls, \"-block-node\"), blockNode), \"\".concat(prefixCls, \"-unselectable\"), !selectable), \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), className),\n    direction: direction,\n    checkable: checkable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-checkbox-inner\")\n    }) : checkable,\n    selectable: selectable,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return (0, _iconUtil[\"default\"])(prefixCls, _switcherIcon, showLine, nodeProps);\n    },\n    draggable: draggableConfig\n  }), children);\n});\nvar _default = exports[\"default\"] = Tree;","map":null,"metadata":{},"sourceType":"script"}