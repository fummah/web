{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _bind2 = require(\"lodash/bind\");\nvar _bind3 = _interopRequireDefault(_bind2);\nvar _isFunction2 = require(\"lodash/isFunction\");\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\nvar _reduce3 = require(\"lodash/reduce\");\nvar _reduce4 = _interopRequireDefault(_reduce3);\nvar _forEach2 = require(\"lodash/forEach\");\nvar _forEach3 = _interopRequireDefault(_forEach2);\nvar _lowerFirst2 = require(\"lodash/lowerFirst\");\nvar _lowerFirst3 = _interopRequireDefault(_lowerFirst2);\nvar _has2 = require(\"lodash/has\");\nvar _has3 = _interopRequireDefault(_has2);\nexports.construct = construct;\nexports.componentDidMount = componentDidMount;\nexports.componentDidUpdate = componentDidUpdate;\nexports.componentWillUnmount = componentWillUnmount;\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/* global google */\n/* eslint-disable no-param-reassign */\nfunction rdcUncontrolledAndControlledProps(acc, value, key) {\n  if ((0, _has3.default)(acc.prevProps, key)) {\n    var match = key.match(/^default(\\S+)/);\n    if (match) {\n      var unprefixedKey = (0, _lowerFirst3.default)(match[1]);\n      if (!(0, _has3.default)(acc.nextProps, unprefixedKey)) {\n        acc.nextProps[unprefixedKey] = acc.prevProps[key];\n      }\n    } else {\n      acc.nextProps[key] = acc.prevProps[key];\n    }\n  }\n  return acc;\n}\nfunction applyUpdaterToNextProps(updaterMap, prevProps, nextProps, instance) {\n  ;\n  (0, _forEach3.default)(updaterMap, function (fn, key) {\n    var nextValue = nextProps[key];\n    if (nextValue !== prevProps[key]) {\n      fn(instance, nextValue);\n    }\n  });\n}\nfunction construct(propTypes, updaterMap, prevProps, instance) {\n  var _reduce2 = (0, _reduce4.default)(propTypes, rdcUncontrolledAndControlledProps, {\n      nextProps: {},\n      prevProps: prevProps\n    }),\n    nextProps = _reduce2.nextProps;\n  applyUpdaterToNextProps(updaterMap, {\n    /* empty prevProps for construct */\n  }, nextProps, instance);\n}\nfunction componentDidMount(component, instance, eventMap) {\n  registerEvents(component, instance, eventMap);\n}\nfunction componentDidUpdate(component, instance, eventMap, updaterMap, prevProps) {\n  component.unregisterAllEvents();\n  applyUpdaterToNextProps(updaterMap, prevProps, component.props, instance);\n  registerEvents(component, instance, eventMap);\n}\nfunction componentWillUnmount(component) {\n  component.unregisterAllEvents();\n}\nfunction registerEvents(component, instance, eventMap) {\n  var registeredList = (0, _reduce4.default)(eventMap, function (acc, googleEventName, onEventName) {\n    if ((0, _isFunction3.default)(component.props[onEventName])) {\n      acc.push(google.maps.event.addListener(instance, googleEventName, component.props[onEventName]));\n    }\n    return acc;\n  }, []);\n  component.unregisterAllEvents = (0, _bind3.default)(_forEach3.default, null, registeredList, unregisterEvent);\n}\nfunction unregisterEvent(registered) {\n  google.maps.event.removeListener(registered);\n}","map":null,"metadata":{},"sourceType":"script"}